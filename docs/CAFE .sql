--------------------------------------------------------
--  파일이 생성됨 - 수요일-5월-05-2021   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table BUY_TBL
--------------------------------------------------------

  CREATE TABLE "BUY_TBL" 
   (	"MAT_ID" CHAR(6 BYTE), 
	"MAT_IDX" NUMBER(3,0), 
	"MAT_PRICE" NUMBER(10,0), 
	"MAT_QTY" NUMBER(3,0), 
	"MAT_DATE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COMMONS_TBL
--------------------------------------------------------

  CREATE TABLE "COMMONS_TBL" 
   (	"COM_ID" CHAR(6 BYTE), 
	"COM_VAL" VARCHAR2(100 BYTE), 
	"COM_LVL" NUMBER(8,0), 
	"COM_SEQ" NUMBER(8,0), 
	"PARENT_ID" CHAR(6 BYTE), 
	"GROUP_ID" CHAR(4 BYTE), 
	"EXCEPT1" VARCHAR2(100 BYTE), 
	"EXCEPT2" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COST_TBL
--------------------------------------------------------

  CREATE TABLE "COST_TBL" 
   (	"COST_ID" CHAR(6 BYTE), 
	"COST_NAME" VARCHAR2(50 BYTE), 
	"COST_PRICE" NUMBER(10,0), 
	"COST_QTY" NUMBER(3,0) DEFAULT 1, 
	"COST_DATE" VARCHAR2(10 BYTE), 
	"COST_CONTENTS" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CUSTOMER_TBL
--------------------------------------------------------

  CREATE TABLE "CUSTOMER_TBL" 
   (	"CUS_ID" CHAR(6 BYTE), 
	"CUS_NAME" VARCHAR2(30 BYTE), 
	"CUS_ADDR" VARCHAR2(300 BYTE), 
	"CUS_TEL" VARCHAR2(13 BYTE), 
	"CUS_BIRTH" VARCHAR2(10 BYTE), 
	"CUS_GRADE" CHAR(6 BYTE) DEFAULT 'COM009', 
	"CUS_CONTENTS" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMPLOYEE_TBL
--------------------------------------------------------

  CREATE TABLE "EMPLOYEE_TBL" 
   (	"EMP_ID" CHAR(6 BYTE), 
	"EMP_NAME" VARCHAR2(30 BYTE), 
	"EMP_TEL" VARCHAR2(13 BYTE), 
	"EMP_BIRTH" VARCHAR2(10 BYTE), 
	"EMP_POS" CHAR(6 BYTE), 
	"EMP_SALARY" NUMBER(8,0), 
	"EMP_ENTER_DATE" VARCHAR2(10 BYTE), 
	"EMP_LEAVE_DATE" VARCHAR2(10 BYTE), 
	"EMP_CONTENTS" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EVENT_TBL
--------------------------------------------------------

  CREATE TABLE "EVENT_TBL" 
   (	"EVENT_ID" CHAR(6 BYTE), 
	"EVENT_CONTENTS" VARCHAR2(100 BYTE), 
	"EVENT_DATE" VARCHAR2(10 BYTE), 
	"EVENT_DIS_RATE" NUMBER(3,2), 
	"EVENT_DIS_GRD" CHAR(6 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table GROUP_TBL
--------------------------------------------------------

  CREATE TABLE "GROUP_TBL" 
   (	"GROUP_ID" CHAR(4 BYTE), 
	"GROUP_NAME" VARCHAR2(50 BYTE), 
	"GROUP_SEQ" NUMBER(3,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MATERIAL_TBL
--------------------------------------------------------

  CREATE TABLE "MATERIAL_TBL" 
   (	"MAT_ID" CHAR(6 BYTE), 
	"MAT_NAME" VARCHAR2(30 BYTE), 
	"MAT_COM" VARCHAR2(30 BYTE), 
	"MAT_ORIGIN" VARCHAR2(30 BYTE), 
	"MAT_CONTENTS" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MENU_TBL
--------------------------------------------------------

  CREATE TABLE "MENU_TBL" 
   (	"MENU_ID" CHAR(4 BYTE), 
	"MENU_PART_ID" VARCHAR2(6 BYTE), 
	"MENU_NAME" VARCHAR2(50 BYTE), 
	"MENU_SIZE" CHAR(1 BYTE), 
	"MENU_HC" CHAR(1 BYTE), 
	"MENU_PRICE" NUMBER(5,0), 
	"MENU_CONTENTS" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table POINT_TBL
--------------------------------------------------------

  CREATE TABLE "POINT_TBL" 
   (	"ORD_ID" CHAR(6 BYTE), 
	"CUS_ID" CHAR(6 BYTE), 
	"SAVE_POINT" NUMBER(5,0), 
	"SAVE_DATE" VARCHAR2(10 BYTE), 
	"USE_POINT_YN" CHAR(1 BYTE) DEFAULT 'N'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRICE_TBL
--------------------------------------------------------

  CREATE TABLE "PRICE_TBL" 
   (	"ORD_ID" CHAR(6 BYTE), 
	"EVENT_ID" CHAR(6 BYTE), 
	"DIS_COM_ID" CHAR(6 BYTE), 
	"USE_POINT" NUMBER(7,0) DEFAULT 0, 
	"ORD_PRICE" NUMBER(7,0), 
	"PAY_PRICE" NUMBER(7,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table RECIPE_TBL
--------------------------------------------------------

  CREATE TABLE "RECIPE_TBL" 
   (	"MENU_ID" CHAR(4 BYTE), 
	"MAT_ID" CHAR(6 BYTE), 
	"MAT_QTY" NUMBER(4,0), 
	"MAT_WATER" NUMBER(4,0), 
	"REC_CONTENTS" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SALARY_TBL
--------------------------------------------------------

  CREATE TABLE "SALARY_TBL" 
   (	"EMP_ID" CHAR(6 BYTE), 
	"SAL_IDX" NUMBER(3,0), 
	"SAL_TLT" NUMBER(8,0), 
	"SAL_MON" VARCHAR2(7 BYTE), 
	"SAL_DATE" VARCHAR2(10 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SALE_TBL
--------------------------------------------------------

  CREATE TABLE "SALE_TBL" 
   (	"ORD_ID" CHAR(6 BYTE), 
	"ORD_IDX" NUMBER(2,0), 
	"CUS_ID" CHAR(6 BYTE), 
	"MENU_ID" CHAR(4 BYTE), 
	"MENU_QTY" NUMBER(2,0), 
	"ORD_PART" CHAR(6 BYTE), 
	"ORD_DATE" DATE, 
	"REFUND_YN" CHAR(1 BYTE) DEFAULT 'N'
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table TIMETABLE_TBL
--------------------------------------------------------

  CREATE TABLE "TIMETABLE_TBL" 
   (	"EMP_ID" CHAR(6 BYTE), 
	"WORK_DATE" VARCHAR2(10 BYTE), 
	"IN_TIME" VARCHAR2(5 BYTE), 
	"OUT_TIME" VARCHAR2(5 BYTE), 
	"TT_CONTENTS" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table WORK_TBL
--------------------------------------------------------

  CREATE TABLE "WORK_TBL" 
   (	"EMP_ID" CHAR(6 BYTE), 
	"WORK_IDX" NUMBER(3,0), 
	"WORK_DATE" VARCHAR2(10 BYTE), 
	"WORK_TIME" VARCHAR2(5 BYTE), 
	"WORK_IO" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into BUY_TBL
SET DEFINE OFF;
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT001',1,20000,8,'04/25/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT002',1,2000,8,'04/25/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT003',1,2000,5,'04/25/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT004',1,40000,7,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT005',1,40000,5,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT006',1,15000,8,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT007',1,25000,5,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT008',1,25000,7,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT009',1,7000,5,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT010',1,8000,7,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT011',1,13000,5,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT012',1,25000,2,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT013',1,13000,100,'04/26/2021');
Insert into BUY_TBL (MAT_ID,MAT_IDX,MAT_PRICE,MAT_QTY,MAT_DATE) values ('MAT014',1,25000,100,'04/26/2021');
REM INSERTING into COMMONS_TBL
SET DEFINE OFF;
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM001','직위',1,1,'COM000','G001',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM002','점장',2,1,'COM001','G001',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM003','매니저',2,2,'COM001','G001',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM004','파트타이머',2,3,'COM001','G001',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM005','등급',1,1,'COM000','G002',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM006','GOLD',2,1,'COM005','G002','0.15','5000');
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM007','SILVER',2,2,'COM005','G002','0.1','3000');
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM008','BRONZE',2,3,'COM005','G002','0.05','1000');
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM009','NORMAL',2,4,'COM005','G002','0',null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM010','주문구분',1,1,'COM000','G003',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM011','EAT-IN',2,1,'COM010','G003','0',null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM012','TAKE-OUT',2,2,'COM010','G003','0.1',null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM013','DELIVERY',2,3,'COM010','G003','0',null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM014','RESERVATION',2,4,'COM010','G003','0.1',null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM015','메뉴구분',1,1,'COM000','G004',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM016','COFFEE',2,1,'COM015','G004',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM017','TEA',2,2,'COM015','G004',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM018','SMOOTHIE',2,3,'COM015','G004',null,null);
Insert into COMMONS_TBL (COM_ID,COM_VAL,COM_LVL,COM_SEQ,PARENT_ID,GROUP_ID,EXCEPT1,EXCEPT2) values ('COM019','GOODS',2,4,'COM015','G004',null,null);
REM INSERTING into COST_TBL
SET DEFINE OFF;
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS001','등받이의자',36000,3,'04/30/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS002','2인쇼파',44500,1,'04/30/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS003','원목의자',80000,4,'05/03/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS004','원목테이블',78000,2,'05/03/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS005','트레이',2800,10,'05/07/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS006','진동벨',72000,3,'05/10/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS007','냅킨',25300,1,'05/13/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS008','스트로우',33000,5,'05/04/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS009','플라스틱컵L',47300,5,'05/04/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS010','플라스틱컵S',35300,5,'05/04/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS011','플라스틱컵뚜껑L',14700,5,'05/04/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS012','플라스틱컵뚜껑S',13500,5,'05/04/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS013','컵홀더',21000,5,'05/12/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS014','포장캐리어',22000,3,'05/12/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS015','포장봉지',15000,2,'05/13/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS016','앞치마',29000,1,'05/13/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS017','컵받침',16000,3,'05/06/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS018','쿠션',24000,2,'05/07/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS019','수도세',120650,1,'05/20/2021',null);
Insert into COST_TBL (COST_ID,COST_NAME,COST_PRICE,COST_QTY,COST_DATE,COST_CONTENTS) values ('COS020','전기세',85030,1,'05/20/2021',null);
REM INSERTING into CUSTOMER_TBL
SET DEFINE OFF;
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS001','홍창목','부산시 수영구 민락동','010-2233-4455','02/19/1994','COM008',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS002','박광우','부산시 남구 대연3동','010-3766-8888','03/07/1996','COM007',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS003','이나영','부산시 부산진구 전포1동','010-4411-0099','08/17/1992','COM008',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS004','김지은','부산시 수영구 수영동','010-3498-1112','04/22/1993','COM009',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS005','황태웅','부산시 연제구 연산1동','010-1133-2677','12/20/1998','COM009',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS006','최예지','부산시 동구 범일2동','010-2884-3329','07/14/1995','COM008',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS007','권현주','부산시 남구 대연1동','010-8770-6332','06/18/1986','COM008',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS008','이동주','부산시 중구 영주2동','010-0027-4331','09/06/1989','COM009',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS009','김재훈','부산시 영도구 봉래1동','010-2867-2030','07/24/1991','COM008',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS010','안윤영','부산시 부산진구 가야1동','010-3346-7943','09/01/2000','COM008',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS011','박정호','부산시 부산진구 개금3동','010-9679-2385','03/20/1988','COM009',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS012','손희준','부산시 남구 용호1동','010-0285-5864','06/26/1984','COM008',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS013','서준수','부산시 수영구 남천2동','010-3486-4234','01/23/1991','COM008',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS014','김윤태','부산시 연제구 거제3동','010-2459-9531','11/16/1993','COM009',null);
Insert into CUSTOMER_TBL (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS) values ('CUS015','김아정','부산시 부산진구 연지동','010-3045-2319','05/09/1997','COM008',null);
REM INSERTING into EMPLOYEE_TBL
SET DEFINE OFF;
Insert into EMPLOYEE_TBL (EMP_ID,EMP_NAME,EMP_TEL,EMP_BIRTH,EMP_POS,EMP_SALARY,EMP_ENTER_DATE,EMP_LEAVE_DATE,EMP_CONTENTS) values ('EMP005','김정은','010-7539-1546','1994-04-27','COM004',8720,'2021-04-25',null,null);
Insert into EMPLOYEE_TBL (EMP_ID,EMP_NAME,EMP_TEL,EMP_BIRTH,EMP_POS,EMP_SALARY,EMP_ENTER_DATE,EMP_LEAVE_DATE,EMP_CONTENTS) values ('EMP001','홍길동','010-1234-5678','2000-05-02','COM002',17890,'2018-08-15',null,null);
Insert into EMPLOYEE_TBL (EMP_ID,EMP_NAME,EMP_TEL,EMP_BIRTH,EMP_POS,EMP_SALARY,EMP_ENTER_DATE,EMP_LEAVE_DATE,EMP_CONTENTS) values ('EMP003','이진영','010-0258-7410','1994-04-10','COM004',8720,'2020-09-01',null,null);
Insert into EMPLOYEE_TBL (EMP_ID,EMP_NAME,EMP_TEL,EMP_BIRTH,EMP_POS,EMP_SALARY,EMP_ENTER_DATE,EMP_LEAVE_DATE,EMP_CONTENTS) values ('EMP004','하경훈','010-5219-0277','1993-09-03','COM004',8720,'2021-02-26',null,null);
Insert into EMPLOYEE_TBL (EMP_ID,EMP_NAME,EMP_TEL,EMP_BIRTH,EMP_POS,EMP_SALARY,EMP_ENTER_DATE,EMP_LEAVE_DATE,EMP_CONTENTS) values ('EMP002','박지원','010-9876-5432','1996-01-01','COM003',12340,'2019-05-05',null,null);
REM INSERTING into EVENT_TBL
SET DEFINE OFF;
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0001','어린이날 할인(GOLD)','05/03/2021',0.25,'COM006');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0002','어린이날 할인','05/03/2021',0.2,'COM007');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0003','어린이날 할인','05/03/2021',0.2,'COM008');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0004','어린이날 할인','05/03/2021',0.2,'COM009');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0005','어린이날 할인(GOLD)','05/04/2021',0.25,'COM006');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0006','어린이날 할인','05/04/2021',0.2,'COM007');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0007','어린이날 할인','05/04/2021',0.2,'COM008');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0008','어린이날 할인','05/04/2021',0.2,'COM009');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0009','어버이날 할인(GOLD)','05/06/2021',0.3,'COM006');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0010','어버이날 할인','05/06/2021',0.2,'COM007');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0011','어버이날 할인','05/06/2021',0.2,'COM008');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0012','어버이날 할인','05/06/2021',0.2,'COM009');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0013','어버이날 할인(GOLD)','05/07/2021',0.3,'COM006');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0014','어버이날 할인','05/07/2021',0.2,'COM007');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0015','어버이날 할인','05/07/2021',0.2,'COM008');
Insert into EVENT_TBL (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD) values ('EV0016','어버이날 할인','05/07/2021',0.2,'COM009');
REM INSERTING into GROUP_TBL
SET DEFINE OFF;
Insert into GROUP_TBL (GROUP_ID,GROUP_NAME,GROUP_SEQ) values ('G002','등급',2);
Insert into GROUP_TBL (GROUP_ID,GROUP_NAME,GROUP_SEQ) values ('G003','주문구분',3);
Insert into GROUP_TBL (GROUP_ID,GROUP_NAME,GROUP_SEQ) values ('G001','직위',1);
Insert into GROUP_TBL (GROUP_ID,GROUP_NAME,GROUP_SEQ) values ('G004','메뉴구분',4);
REM INSERTING into MATERIAL_TBL
SET DEFINE OFF;
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT001','원두(kg)','스타버스','과테말라','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT002','저지방우유(L)','파스퇴르','강원도','2');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT003','우유(L)','부산우유','강원도','2');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT004','캐모마일 잎(kg)','하리스','제주도','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT005','페퍼민트 잎(kg)','하리스','제주도','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT006','생딸기(kg)','농협','논산','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT007','딸기시럽(L)','농협','논산','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT008','다크초콜릿(kg)','모티져스','호주','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT009','화이트초콜릿(kg)','모티져스','호주','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT010','초코시럽(L)','모티져스','호주','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT011','설탕(kg)','백설','부산','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT012','플레인요거트(L)','야쿠르트','부산','2');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT013','머그컵(EA)','용당','부산','1');
Insert into MATERIAL_TBL (MAT_ID,MAT_NAME,MAT_COM,MAT_ORIGIN,MAT_CONTENTS) values ('MAT014','텀블러(EA)','용당','부산','1');
REM INSERTING into MENU_TBL
SET DEFINE OFF;
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M001','COM016','아메리카노','S','H',4500,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M002','COM016','아메리카노','L','H',5000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M003','COM016','아메리카노','S','C',4500,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M004','COM016','아메리카노','L','C',5000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M005','COM016','카페라떼','S','H',5000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M006','COM016','카페라떼','L','H',6000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M007','COM016','카페라떼','S','C',5000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M008','COM016','카페라떼','L','C',6000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M009','COM017','카모마일','L','H',4000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M010','COM017','카모마일','L','C',4000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M011','COM017','페퍼민트','L','H',4000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M012','COM017','페퍼민트','L','C',4000,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M013','COM018','딸기스무디','S','C',5500,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M014','COM018','딸기스무디','L','C',6500,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M015','COM018','초코스무디','S','C',5500,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M016','COM018','초코스무디','L','C',6500,null);
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M017','COM019','머그컵','S',null,8000,'300ML 머그컵');
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M018','COM019','머그컵','L',null,11000,'500ML  머그컵');
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M019','COM019','텀블러','S',null,14000,'300ML 텀블러');
Insert into MENU_TBL (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS) values ('M020','COM019','텀블러','L',null,18000,'500ML 텀블러');
REM INSERTING into POINT_TBL
SET DEFINE OFF;
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00004','CUS015',65,'21/04/26','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00005','CUS002',375,'21/04/26','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00006','CUS011',41,'21/04/26','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00007','CUS001',72,'21/04/27','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00008','CUS009',149,'21/04/27','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00009','CUS007',810,'21/04/27','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00013','CUS003',450,'21/04/28','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00014','CUS012',190,'21/04/28','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00015','CUS008',72,'21/04/29','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00016','CUS003',216,'21/04/29','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00017','CUS010',195,'21/04/29','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00002','CUS004',100,'21/04/26','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00003','CUS013',248,'21/04/26','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00018','CUS001',540,'21/04/29','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00019','CUS002',670,'21/04/29','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00020','CUS009',207,'21/04/30','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00061','CUS003',48,'21/05/11','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00063','CUS012',527,'21/05/12','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00048','CUS001',1000,'21/05/07','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00049','CUS003',700,'21/05/07','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00051','CUS009',48,'21/05/10','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00052','CUS003',685,'21/05/10','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00045','CUS009',1800,'21/05/06','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00047','CUS002',500,'21/05/07','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00054','CUS004',100,'21/05/10','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00056','CUS003',181,'21/05/11','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00058','CUS009',342,'21/05/11','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00059','CUS002',50,'21/05/11','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00067','CUS007',293,'21/05/13','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00068','CUS009',300,'21/05/13','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00070','CUS008',297,'21/05/13','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00071','CUS006',0,'21/05/14','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00073','CUS012',300,'21/05/14','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00074','CUS007',351,'21/05/14','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00055','CUS013',1733,'21/05/10','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00011','CUS006',198,'21/04/27','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00021','CUS013',270,'21/04/30','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00022','CUS015',260,'21/04/30','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00023','CUS006',198,'21/04/30','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00012','CUS010',288,'21/04/28','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00024','CUS001',252,'21/05/03','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00001','CUS001',72,'21/04/26','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00010','CUS005',195,'21/04/27','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00026','CUS015',96,'21/05/03','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00028','CUS009',576,'21/05/03','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00031','CUS007',328,'21/05/04','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00033','CUS009',0,'21/05/04','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00034','CUS009',634,'21/05/04','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00038','CUS013',320,'21/05/04','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00062','CUS004',340,'21/05/11','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00029','CUS013',176,'21/05/03','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00025','CUS003',212,'21/05/03','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00027','CUS009',720,'21/05/03','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00030','CUS006',400,'21/05/04','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00032','CUS008',410,'21/05/04','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00035','CUS010',140,'21/05/04','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00036','CUS001',194,'21/05/04','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00037','CUS012',1944,'21/05/04','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00039','CUS002',289,'21/05/06','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00040','CUS015',508,'21/05/06','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00041','CUS010',464,'21/05/06','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00042','CUS001',0,'21/05/06','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00043','CUS002',2052,'21/05/06','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00044','CUS009',65,'21/05/06','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00053','CUS013',300,'21/05/10','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00046','CUS006',407,'21/05/07','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00050','CUS004',117,'21/05/10','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00057','CUS004',198,'21/05/11','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00060','CUS015',100,'21/05/11','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00064','CUS007',100,'21/05/12','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00065','CUS006',1000,'21/05/12','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00066','CUS001',500,'21/05/12','Y');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00069','CUS010',171,'21/05/13','N');
Insert into POINT_TBL (ORD_ID,CUS_ID,SAVE_POINT,SAVE_DATE,USE_POINT_YN) values ('A00072','CUS001',347,'21/05/14','N');
REM INSERTING into PRICE_TBL
SET DEFINE OFF;
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00063',null,'COM008',0,55500,52725);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00066',null,'COM007',500,57500,51250);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00001',null,'COM012',0,8000,7200);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00002',null,'COM009',0,10000,10000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00003',null,'COM012',0,27500,24750);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00004',null,'COM009',0,6500,6500);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00005',null,'COM009',0,37500,37500);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00006',null,'COM012',0,4500,4050);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00007',null,'COM012',0,8000,7200);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00008',null,'COM012',0,16500,14850);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00009',null,'COM014',0,90000,81000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00010',null,'COM009',0,19500,19500);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00011',null,'COM012',0,22000,19800);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00012',null,'COM012',0,32000,28800);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00013',null,'COM012',0,50000,45000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00014',null,'COM009',0,19000,19000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00015',null,'COM012',0,8000,7200);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00016',null,'COM012',0,24000,21600);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00017',null,'COM009',0,19500,19500);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00018',null,'COM014',0,60000,54000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00019',null,'COM009',0,67000,67000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00020',null,'COM012',0,23000,20700);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00021',null,'COM012',0,30000,27000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00022',null,'COM009',0,26000,26000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00023',null,'COM012',0,22000,19800);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00045','EV0011','COM014',1800,10000,5400);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00048','EV0014','COM007',1000,50500,35360);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00046','EV0016','COM012',0,56500,40680);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00047','EV0014','COM007',500,53000,37660);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00050',null,'COM012',0,13000,11700);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00051',null,'COM008',0,5000,4750);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00053',null,'COM012',300,25000,22200);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00054',null,'COM009',100,8000,7900);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00056',null,'COM008',0,19000,18050);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00058',null,'COM008',0,36000,34200);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00059',null,'COM007',0,5500,4950);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00060',null,'COM009',0,10000,10000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00068',null,'COM012',300,35000,31200);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00069',null,'COM008',0,18000,17100);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00070',null,'COM014',0,33000,29700);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00071',null,'COM008',0,0,0);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00072',null,'COM007',0,38500,34650);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00073',null,'COM008',300,119500,113225);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00074',null,'COM012',300,39000,35100);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00024','EV0004','COM009',0,31500,25200);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00025','EV0004','COM009',0,26500,21200);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00026','EV0004','COM009',0,12000,9600);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00032','EV0008','COM012',0,57000,41040);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00033','EV0007','COM012',0,0,0);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00038','EV0008','COM009',0,40000,32000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00042','EV0011','COM012',0,0,0);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00062',null,'COM009',0,34000,34000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00027','EV0004','COM012',0,100000,72000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00028','EV0004','COM009',0,72000,57600);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00029','EV0004','COM014',0,24500,17640);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00030','EV0008','COM009',0,50000,40000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00031','EV0008','COM009',0,41000,32800);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00034','EV0007','COM012',0,88000,63360);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00035','EV0008','COM009',0,17500,14000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00036','EV0008','COM014',0,27000,19440);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00037','EV0008','COM012',0,270000,194400);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00039','EV0011','COM008',0,38000,28880);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00040','EV0012','COM009',0,63500,50800);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00041','EV0012','COM009',0,58000,46400);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00043','EV0011','COM008',0,270000,205200);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00044','EV0011','COM014',0,9000,6480);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00049','EV0016','COM012',700,180000,128900);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00052',null,'COM009',0,68500,68500);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00055',null,'COM012',200,192500,173250);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00057',null,'COM014',0,22000,19800);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00061',null,'COM008',0,5000,4750);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00064',null,'COM008',100,13000,12250);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00065',null,'COM008',1000,60000,56000);
Insert into PRICE_TBL (ORD_ID,EVENT_ID,DIS_COM_ID,USE_POINT,ORD_PRICE,PAY_PRICE) values ('A00067',null,'COM012',0,32500,29250);
REM INSERTING into RECIPE_TBL
SET DEFINE OFF;
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M001','MAT001',20,250,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M002','MAT001',30,400,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M003','MAT001',20,200,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M004','MAT001',30,350,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M005','MAT001',15,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M005','MAT003',125,125,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M006','MAT001',25,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M006','MAT003',175,225,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M007','MAT001',15,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M007','MAT003',125,100,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M008','MAT001',25,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M008','MAT003',175,200,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M009','MAT004',100,300,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M010','MAT004',150,450,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M011','MAT005',100,300,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M012','MAT005',150,450,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M013','MAT002',250,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M013','MAT006',200,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M013','MAT007',30,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M013','MAT011',10,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M013','MAT012',30,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M014','MAT002',350,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M014','MAT006',250,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M014','MAT007',15,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M014','MAT011',40,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M014','MAT012',50,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M015','MAT002',250,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M015','MAT008',30,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M015','MAT009',30,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M015','MAT010',50,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M015','MAT012',30,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M016','MAT002',350,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M016','MAT008',45,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M016','MAT009',45,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M016','MAT010',70,null,null);
Insert into RECIPE_TBL (MENU_ID,MAT_ID,MAT_QTY,MAT_WATER,REC_CONTENTS) values ('M016','MAT012',50,null,null);
REM INSERTING into SALARY_TBL
SET DEFINE OFF;
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP002',1,493600,'2021-04','2021-05-10');
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP003',1,139520,'2021-04','2021-05-10');
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP005',2,313920,'2021-05','2021-06-10');
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP001',1,572480,'2021-04','2021-05-10');
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP004',1,279040,'2021-04','2021-05-10');
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP005',1,104640,'2021-04','2021-05-10');
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP001',2,554590,'2021-05','2021-06-10');
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP002',2,715720,'2021-05','2021-06-10');
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP003',2,279040,'2021-05','2021-06-10');
Insert into SALARY_TBL (EMP_ID,SAL_IDX,SAL_TLT,SAL_MON,SAL_DATE) values ('EMP004',2,558080,'2021-05','2021-06-10');
REM INSERTING into SALE_TBL
SET DEFINE OFF;
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00001',1,'CUS001','M009',2,'COM012',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00002',1,'CUS004','M003',1,'COM011',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00002',2,'CUS004','M013',1,'COM011',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00003',1,'CUS013','M008',3,'COM012',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00003',2,'CUS013','M010',1,'COM012',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00003',3,'CUS013','M013',1,'COM012',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00004',1,'CUS015','M016',1,'COM011',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00005',1,'CUS002','M013',2,'COM013',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00005',2,'CUS002','M001',3,'COM013',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00005',3,'CUS002','M004',1,'COM013',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00005',4,'CUS002','M010',2,'COM013',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00006',1,'CUS011','M003',1,'COM012',to_date('21/04/26','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00007',1,'CUS001','M009',2,'COM012',to_date('21/04/27','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00008',1,'CUS009','M015',3,'COM012',to_date('21/04/27','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00009',1,'CUS007','M020',5,'COM014',to_date('21/04/27','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00010',1,'CUS005','M016',3,'COM011',to_date('21/04/27','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00011',1,'CUS006','M013',4,'COM012',to_date('21/04/27','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00012',1,'CUS010','M006',2,'COM012',to_date('21/04/28','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00012',2,'CUS010','M004',4,'COM012',to_date('21/04/28','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00013',1,'CUS003','M004',10,'COM012',to_date('21/04/28','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00014',1,'CUS012','M019',1,'COM011',to_date('21/04/28','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00014',2,'CUS012','M002',1,'COM011',to_date('21/04/28','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00015',1,'CUS008','M012',2,'COM012',to_date('21/04/29','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00016',1,'CUS003','M008',4,'COM012',to_date('21/04/29','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00017',1,'CUS010','M014',3,'COM011',to_date('21/04/29','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00018',1,'CUS001','M008',10,'COM014',to_date('21/04/29','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00019',1,'CUS002','M004',5,'COM013',to_date('21/04/29','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00019',2,'CUS002','M008',7,'COM013',to_date('21/04/29','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00020',1,'CUS009','M020',1,'COM012',to_date('21/04/30','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00020',2,'CUS009','M004',1,'COM012',to_date('21/04/30','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00021',1,'CUS013','M008',3,'COM012',to_date('21/04/30','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00021',2,'CUS013','M010',3,'COM012',to_date('21/04/30','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00022',1,'CUS015','M016',4,'COM011',to_date('21/04/30','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00023',1,'CUS006','M013',4,'COM012',to_date('21/04/30','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00024',1,'CUS001','M009',1,'COM011',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00024',2,'CUS001','M013',1,'COM011',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00024',3,'CUS001','M010',1,'COM011',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00024',4,'CUS001','M020',1,'COM011',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00025',1,'CUS003','M002',2,'COM011',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00025',2,'CUS003','M004',2,'COM011',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00025',3,'CUS003','M016',1,'COM011',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00026',1,'CUS015','M009',1,'COM013',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00026',2,'CUS015','M010',2,'COM013',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00027',1,'CUS009','M001',3,'COM012',to_date('21/05/03','RR/MM/DD'),'Y');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00027',2,'CUS009','M002',2,'COM012',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00027',3,'CUS009','M020',5,'COM012',to_date('21/05/03','RR/MM/DD'),'Y');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00028',1,'CUS009','M020',4,'COM013',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00029',1,'CUS013','M009',1,'COM014',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00029',2,'CUS013','M003',1,'COM014',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00029',3,'CUS013','M004',1,'COM014',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00029',4,'CUS013','M005',1,'COM014',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00029',5,'CUS013','M006',1,'COM014',to_date('21/05/03','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00030',1,'CUS006','M007',3,'COM013',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00030',2,'CUS006','M008',2,'COM013',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00030',3,'CUS006','M013',3,'COM013',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00030',4,'CUS006','M014',1,'COM013',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00031',1,'CUS007','M003',4,'COM011',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00031',2,'CUS007','M008',2,'COM011',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00031',3,'CUS007','M013',2,'COM011',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00032',1,'CUS008','M003',2,'COM012',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00032',2,'CUS008','M008',2,'COM012',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00032',3,'CUS008','M020',2,'COM012',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00033',1,'CUS009','M018',10,'COM012',to_date('21/05/04','RR/MM/DD'),'Y');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00034',1,'CUS009','M018',8,'COM012',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00035',1,'CUS010','M001',1,'COM011',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00035',2,'CUS010','M002',1,'COM011',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00035',3,'CUS010','M009',2,'COM011',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00036',1,'CUS001','M001',3,'COM014',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00036',2,'CUS001','M003',3,'COM014',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00037',1,'CUS012','M020',15,'COM012',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00038',1,'CUS013','M002',4,'COM011',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00038',2,'CUS013','M006',2,'COM011',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00038',3,'CUS013','M009',2,'COM011',to_date('21/05/04','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00039',1,'CUS002','M002',4,'COM013',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00039',2,'CUS002','M003',4,'COM013',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00040',1,'CUS015','M012',2,'COM011',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00040',2,'CUS015','M013',2,'COM011',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00040',3,'CUS015','M014',3,'COM011',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00040',4,'CUS015','M004',5,'COM011',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00041',1,'CUS010','M006',4,'COM013',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00041',2,'CUS010','M008',2,'COM013',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00041',3,'CUS010','M013',4,'COM013',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00042',1,'CUS001','M019',20,'COM012',to_date('21/05/06','RR/MM/DD'),'Y');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00043',1,'CUS002','M020',15,'COM013',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00044',1,'CUS009','M003',2,'COM014',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00045',1,'CUS009','M007',2,'COM014',to_date('21/05/06','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00046',1,'CUS006','M001',2,'COM012',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00046',2,'CUS006','M016',5,'COM012',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00046',3,'CUS006','M005',3,'COM012',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00047',1,'CUS002','M004',2,'COM011',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00047',2,'CUS002','M005',5,'COM011',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00047',3,'CUS002','M006',3,'COM011',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00048',1,'CUS001','M010',2,'COM013',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00048',2,'CUS001','M015',3,'COM013',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00048',3,'CUS001','M016',4,'COM013',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00049',1,'CUS003','M020',10,'COM012',to_date('21/05/07','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00050',1,'CUS004','M001',2,'COM012',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00050',2,'CUS004','M010',1,'COM012',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00051',1,'CUS009','M005',1,'COM011',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00052',1,'CUS003','M013',1,'COM011',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00052',2,'CUS003','M014',8,'COM011',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00052',3,'CUS003','M018',1,'COM011',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00053',1,'CUS013','M007',5,'COM012',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00054',1,'CUS004','M009',2,'COM013',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00055',1,'CUS013','M002',10,'COM012',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00055',2,'CUS013','M006',2,'COM012',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00055',3,'CUS013','M008',2,'COM012',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00055',4,'CUS013','M016',1,'COM012',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00055',5,'CUS013','M019',8,'COM012',to_date('21/05/10','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00055',6,'CUS013','M020',1,'COM012',to_date('21/05/10','RR/MM/DD'),'Y');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00056',1,'CUS003','M003',2,'COM011',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00056',2,'CUS003','M004',2,'COM011',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00057',1,'CUS004','M013',4,'COM014',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00058',1,'CUS009','M004',2,'COM011',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00058',2,'CUS009','M014',2,'COM011',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00058',3,'CUS009','M016',2,'COM011',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00059',1,'CUS002','M013',1,'COM013',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00060',1,'CUS015','M004',2,'COM011',to_date('21/05/11','RR/MM/DD'),'Y');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00061',1,'CUS003','M002',1,'COM011',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00062',1,'CUS004','M005',2,'COM013',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00062',2,'CUS004','M006',4,'COM013',to_date('21/05/11','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00063',1,'CUS012','M001',5,'COM013',to_date('21/05/12','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00063',2,'CUS012','M002',4,'COM013',to_date('21/05/12','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00063',3,'CUS012','M014',2,'COM013',to_date('21/05/12','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00064',1,'CUS007','M014',2,'COM011',to_date('21/05/12','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00065',1,'CUS006','M006',10,'COM011',to_date('21/05/12','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00066',1,'CUS001','M006',4,'COM014',to_date('21/05/12','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00066',2,'CUS001','M016',3,'COM014',to_date('21/05/12','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00066',3,'CUS001','M019',1,'COM014',to_date('21/05/12','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00067',1,'CUS007','M013',1,'COM012',to_date('21/05/13','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00067',2,'CUS007','M001',6,'COM012',to_date('21/05/13','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00068',1,'CUS009','M005',7,'COM012',to_date('21/05/13','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00069',1,'CUS010','M007',2,'COM011',to_date('21/05/13','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00069',2,'CUS010','M009',2,'COM011',to_date('21/05/13','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00069',3,'CUS010','M018',3,'COM011',to_date('21/05/13','RR/MM/DD'),'Y');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00070',1,'CUS008','M002',3,'COM014',to_date('21/05/13','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00070',2,'CUS008','M003',4,'COM014',to_date('21/05/13','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00071',1,'CUS006','M002',6,'COM011',to_date('21/05/14','RR/MM/DD'),'Y');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00072',1,'CUS001','M001',3,'COM014',to_date('21/05/14','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00072',2,'CUS001','M002',5,'COM014',to_date('21/05/14','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00073',1,'CUS012','M013',3,'COM011',to_date('21/05/14','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00073',2,'CUS012','M016',2,'COM011',to_date('21/05/14','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00073',3,'CUS012','M020',5,'COM011',to_date('21/05/14','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00074',1,'CUS007','M014',6,'COM012',to_date('21/05/14','RR/MM/DD'),'N');
Insert into SALE_TBL (ORD_ID,ORD_IDX,CUS_ID,MENU_ID,MENU_QTY,ORD_PART,ORD_DATE,REFUND_YN) values ('A00074',2,'CUS007','M019',3,'COM012',to_date('21/05/14','RR/MM/DD'),'Y');
REM INSERTING into TIMETABLE_TBL
SET DEFINE OFF;
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-04-26','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-04-26','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-04-26','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-04-26','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-04-26','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-04-27','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-04-27','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-04-27','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-04-27','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-04-27','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-04-28','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-04-28','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-04-28','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-04-28','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-04-28','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-04-29','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-04-29','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-04-29','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-04-29','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-04-29','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-04-30','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-04-30','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-04-30','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-04-30','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-04-30','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-05-03','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-05-03','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-05-03','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-05-03','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-05-03','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-05-04','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-05-04','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-05-04','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-05-04','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-05-04','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-05-06','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-05-06','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-05-06','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-05-06','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-05-06','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-05-07','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-05-07','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-05-07','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-05-07','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-05-07','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-05-11','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-05-11','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-05-11','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-05-11','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-05-11','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-05-12','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-05-12','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-05-12','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-05-12','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-05-12','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-05-13','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-05-13','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-05-13','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-05-13','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-05-13','10:00','22:00','상시 근무');
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP001','2021-05-14','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP002','2021-05-14','10:00','18:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP003','2021-05-14','10:00','14:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP004','2021-05-14','14:00','22:00',null);
Insert into TIMETABLE_TBL (EMP_ID,WORK_DATE,IN_TIME,OUT_TIME,TT_CONTENTS) values ('EMP005','2021-05-14','10:00','22:00','상시 근무');
REM INSERTING into WORK_TBL
SET DEFINE OFF;
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',1,'2021-04-26','09:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',1,'2021-04-26','09:52','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',1,'2021-04-26','09:58','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',1,'2021-04-26','13:56','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',2,'2021-04-26','14:05','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',2,'2021-04-26','18:00','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',2,'2021-04-26','18:03','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',2,'2021-04-26','22:01','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',3,'2021-04-27','09:58','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',3,'2021-04-27','09:59','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',3,'2021-04-27','09:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',3,'2021-04-27','13:59','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',4,'2021-04-27','14:01','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',4,'2021-04-27','18:10','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',4,'2021-04-27','18:08','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',4,'2021-04-27','22:05','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',5,'2021-04-28','13:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',5,'2021-04-28','09:57','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',1,'2021-04-28','09:49','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',5,'2021-04-28','13:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',2,'2021-04-28','14:04','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',6,'2021-04-28','22:06','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',6,'2021-04-28','18:03','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',6,'2021-04-28','22:06','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',7,'2021-04-29','13:59','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',7,'2021-04-29','09:50','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',7,'2021-04-29','09:52','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',3,'2021-04-29','13:48','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',4,'2021-04-29','22:06','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',8,'2021-04-29','22:00','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',8,'2021-04-29','18:01','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',8,'2021-04-29','14:05','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',9,'2021-04-30','09:59','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',9,'2021-04-30','09:53','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',9,'2021-04-30','14:09','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',10,'2021-04-30','18:00','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',10,'2021-04-30','14:01','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',10,'2021-04-30','22:06','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',9,'2021-05-03','09:58','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',11,'2021-05-03','09:59','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',5,'2021-05-03','09:57','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',11,'2021-05-03','13:45','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',10,'2021-05-03','16:02','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',12,'2021-05-03','18:03','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',6,'2021-05-03','18:11','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',12,'2021-05-03','22:03','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',7,'2021-05-04','09:49','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',11,'2021-05-04','09:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',13,'2021-05-04','13:40','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',13,'2021-05-04','13:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',8,'2021-05-04','18:11','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',14,'2021-05-04','18:13','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',14,'2021-05-04','22:11','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',14,'2021-05-04','22:11','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',11,'2021-05-06','09:59','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',15,'2021-05-06','09:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',15,'2021-05-06','09:52','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',15,'2021-05-06','13:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',16,'2021-05-06','14:11','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',16,'2021-05-06','18:11','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',12,'2021-05-06','19:27','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',16,'2021-05-06','22:01','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',9,'2021-05-07','09:50','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',17,'2021-05-07','10:07','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',17,'2021-05-07','14:02','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',18,'2021-05-07','14:05','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',10,'2021-05-07','18:01','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',18,'2021-05-07','22:05','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',13,'2021-05-11','09:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',17,'2021-05-11','10:03','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',19,'2021-05-11','09:58','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',19,'2021-05-11','13:56','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',20,'2021-05-11','14:05','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',14,'2021-05-11','18:00','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',18,'2021-05-11','18:03','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',20,'2021-05-11','22:01','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',11,'2021-05-12','09:49','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',21,'2021-05-12','09:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',19,'2021-05-12','13:40','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',21,'2021-05-12','13:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',12,'2021-05-12','18:11','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',22,'2021-05-12','18:13','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',20,'2021-05-12','22:11','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',22,'2021-05-12','22:11','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',15,'2021-05-13','13:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',21,'2021-05-13','09:57','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',13,'2021-05-13','09:49','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',23,'2021-05-13','14:05','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP005',14,'2021-05-13','14:04','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP001',16,'2021-05-13','22:06','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',22,'2021-05-13','18:03','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',24,'2021-05-13','22:06','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',23,'2021-05-14','10:01','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',23,'2021-05-14','09:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',25,'2021-05-14','13:55','I');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP003',24,'2021-05-14','14:06','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP002',24,'2021-05-14','18:06','O');
Insert into WORK_TBL (EMP_ID,WORK_IDX,WORK_DATE,WORK_TIME,WORK_IO) values ('EMP004',26,'2021-05-14','22:03','O');
--------------------------------------------------------
--  DDL for Index BUY_TBL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "BUY_TBL_PK" ON "BUY_TBL" ("MAT_ID", "MAT_IDX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_SALE_TBL
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_SALE_TBL" ON "SALE_TBL" ("ORD_ID", "ORD_IDX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_TIMETABLE_TBL
--------------------------------------------------------

  CREATE UNIQUE INDEX "PK_TIMETABLE_TBL" ON "TIMETABLE_TBL" ("EMP_ID", "WORK_DATE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SALARY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "SALARY_PK" ON "SALARY_TBL" ("EMP_ID", "SAL_IDX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index WORK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "WORK_PK" ON "WORK_TBL" ("EMP_ID", "WORK_IDX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Package PKG_COMMONS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_COMMONS" AS 


 /* 공통 테이블 추가 프로시저 */

  PROCEDURE PROC_INS_COMMONS_TBL
  (
    IN_COM_VAL          IN          VARCHAR2,
    IN_COM_LVL          IN          NUMBER,
    IN_PARRENT_ID       IN          VARCHAR2,
    IN_GROUP_ID         IN          VARCHAR2,
    IN_EXCEPT1          IN          VARCHAR2,
    IN_EXCEPT2          IN          VARCHAR2,
    O_MSG               OUT         VARCHAR2
  );

  /* 공통 테이블 조회 프로시저 */
  PROCEDURE PROC_SEL_COMMONS_TBL
  (
    O_CUR               OUT         SYS_REFCURSOR
  );

  /* 공통 테이블 수정 프로시저 */
  PROCEDURE PROC_UP_COMMONS_TBL
  (
    IN_COM_ID           IN          VARCHAR2, -- 기존 아이디
    CHG_COM_ID          IN          VARCHAR2, -- 새로운 아이디
    IN_COM_VAL          IN          VARCHAR2,
    IN_COM_LVL          IN          NUMBER,
    IN_COM_SEQ          IN          NUMBER,
    IN_PARENT_ID        IN          VARCHAR2,
    IN_GROUP_ID         IN          VARCHAR2,
    IN_EXCEPT1          IN          VARCHAR2,
    IN_EXCEPT2          IN          VARCHAR2   
  );

  /* 공통 테이블 삭제 프로시저 */
  PROCEDURE PROC_DEL_COMMONS_TBL
  (
    IN_COM_ID           IN          VARCHAR2
  );

END PKG_COMMONS;

/
--------------------------------------------------------
--  DDL for Package PKG_COMPANY_MANAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_COMPANY_MANAGE" AS 

  /* 재료구매와 판매에 따른 재고관리 */ 
    PROCEDURE PROC_STOCK_MNG
    (
        IN_MAT_ID       IN      VARCHAR2,
        O_CUR           OUT     SYS_REFCURSOR
    );
    
    /* 판매구분에 따른 매출 */
    PROCEDURE PROC_ORDER_PART 
    (
        IN_COM_ID       IN          VARCHAR2,
        O_CUR           OUT         SYS_REFCURSOR
    );
    
    /* 총 수익과 영업이익 */
    PROCEDURE PROC_REVENUE
    (
        O_CUR       OUT         SYS_REFCURSOR
    );
END PKG_COMPANY_MANAGE;

/
--------------------------------------------------------
--  DDL for Package PKG_CUSTOMER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_CUSTOMER" AS 

--CUSTOMER 데이터 삽입 및 수정
  PROCEDURE PROC_MOD_CUSTOEMR
  (
        IN_CUS_ID       IN      VARCHAR2,
        IN_CUS_NAME     IN      VARCHAR2,
        IN_CUS_ADDR     IN      VARCHAR2,
        IN_CUS_TEL      IN      VARCHAR2,
        IN_CUS_BIRTH    IN      VARCHAR2,
        IN_CUS_GRADE    IN      VARCHAR2,
        IN_CUS_CONTENTS     IN      VARCHAR2,
        O_MSG             OUT       VARCHAR2
  );

  --CUSTOMER SELECT,검색
  PROCEDURE PROC_SEL_CUSTOMER
  (
        IN_CUS_ID       IN      VARCHAR2,
        IN_CUS_NAME     IN      VARCHAR2,
        IN_CUS_ADDR     IN      VARCHAR2,
        IN_CUS_TEL      IN      VARCHAR2,
        IN_CUS_BIRTH    IN      VARCHAR2,
        IN_CUS_GRADE    IN      VARCHAR2,
        O_RST           OUT     SYS_REFCURSOR
    );

    PROCEDURE PROC_DEL_CUSTOMER
    (
        IN_CUS_ID       IN      VARCHAR2
    );
END PKG_CUSTOMER;

/
--------------------------------------------------------
--  DDL for Package PKG_CUS_MANAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_CUS_MANAGE" AS 

    /* 각 고객들이 가장 많이 주문한 메뉴 조회 프로시저 */
    
    PROCEDURE PROC_BEST_MENU_BY_CUS
    (
        O_CUR       OUT         SYS_REFCURSOR
    );
    
    /* 환불 많이 한 고객 점수 */
    
    PROCEDURE PROC_REFUND_CNT -- 환불 많이 한 고객 점수
    (
        IN_CUS_ID       IN          VARCHAR2,
        O_CUR           OUT         SYS_REFCURSOR
    );
    
    /* 고객들의 할인받은 금액 조회 */
    
    PROCEDURE PROC_SEL_DIS_PRICE
    (
        IN_CUS_ID       IN      VARCHAR2,
        IN_CUS_NAME     IN      VARCHAR2, 
        O_RST           OUT     SYS_REFCURSOR
    );
    
    /* 고객들의 환불횟수 조회 프로시저 */
    
    PROCEDURE PROC_SEL_REFUND_PERCUS
    (
        IN_CUS_ID           IN      VARCHAR2,
        IN_CUS_NAME         IN      VARCHAR2,
        O_RST               OUT     SYS_REFCURSOR
    );
END PKG_CUS_MANAGE;

/
--------------------------------------------------------
--  DDL for Package PKG_EMPLOYEE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_EMPLOYEE" 
AS 
    
    /* EMPLOYEE_TBL 추가 프로시저 */ 

    PROCEDURE PROC_INS_EMPLOYEE_TBL
    (
        IN_EMP_NAME             IN     VARCHAR2,
        IN_EMP_TEL              IN     VARCHAR2,
        IN_EMP_BIRTH            IN     VARCHAR2,
        IN_EMP_POS              IN     VARCHAR2,
        IN_EMP_SALARY           IN     NUMBER,
        IN_EMP_ENTER_DATE       IN     VARCHAR2,
        IN_EMP_LEAVE_DATE       IN     VARCHAR2,
        IN_EMP_CONTENTS         IN     VARCHAR2
    );

    /* EMPLOYEE_TBL 조회 프로시저 */

    PROCEDURE PROC_SEL_EMPLOYEE_TBL
    (
        IN_EMP_NAME         IN      VARCHAR2,
        O_CUR               OUT     SYS_REFCURSOR
    );

    /* EMPLOYEE_TBL 수정 프로시저 */

    PROCEDURE PROC_UP_EMPLOYEE_TBL
    (
        IN_EMP_ID               IN     VARCHAR2,
        CHG_EMP_ID              IN     VARCHAR2,
        IN_EMP_NAME             IN     VARCHAR2,
        IN_EMP_TEL              IN     VARCHAR2,
        IN_EMP_BIRTH            IN     VARCHAR2,
        IN_EMP_POS              IN     VARCHAR2,
        IN_EMP_SALARY           IN     NUMBER,
        IN_EMP_ENTER_DATE       IN     VARCHAR2,
        IN_EMP_LEAVE_DATE       IN     VARCHAR2,
        IN_EMP_CONTENTS         IN     VARCHAR2
    );

    /* EMPLOYEE_TBL 직원 퇴사일 입력 프로시저 */

    PROCEDURE PROC_LEAVE_EMPLOYEE_TBL
    (
        IN_EMP_ID               IN      VARCHAR2,
        IN_EMP_LEAVE_DATE       IN      VARCHAR2
    );

    /* EMPLOYEE_TBL 삭제 프로시저 */

    PROCEDURE PROC_DEL_EMPLOYEE_TBL
    (
        IN_EMP_ID               IN      VARCHAR2
    );

END PKG_EMPLOYEE;

/
--------------------------------------------------------
--  DDL for Package PKG_EMP_MANAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_EMP_MANAGE" AS 

  /* 월별 가장 매출을 많이 올린 직원에게 지급하는 보너스 조회 프로시저 */ 
  PROCEDURE PROC_GIVE_BONUS
  (
    IN_DATE         IN          VARCHAR2,
    O_CUR           OUT         SYS_REFCURSOR
  );
  
  /* 특정 날짜의 매출이 가장 높았던 시간대에 근무한 직원 조회 프로시저 */
  PROCEDURE PROC_EMP_BY_BESTTIME
    (
        IN_DATE         IN          VARCHAR2,
        O_CUR           OUT         SYS_REFCURSOR
    );
    
    /* 직원 결근 조회 프로시저 */
    PROCEDURE PROC_SEL_ABS_ATT
    (
        IN_EMP_ID       IN      VARCHAR2,
        IN_CHECK_SUMMARY    IN      NUMBER,         --1: 요약   0:전체
        O_RST           OUT     SYS_REFCURSOR
    );
    
    /* 직원 지각 조회 프로시저 */
    
    PROCEDURE PROC_SEL_LATE_ATT
    (
        IN_EMP_ID       IN      VARCHAR2,
        IN_EMP_NAME     IN      VARCHAR2,
        IN_CHECK_SUMMARY    IN      NUMBER,      --1: 요약   0:전체
        O_RST           OUT     SYS_REFCURSOR
    );
    
    /* 직원 주휴수당 지급 조회 프로시저 */

    PROCEDURE PROC_SEL_W_SALARY
    (
        IN_EMP_ID       IN      VARCHAR2,
        IN_EMP_NAME     IN      VARCHAR2,
        IN_WEEK_NUM     IN      NUMBER,
        O_RST           OUT     SYS_REFCURSOR
    );
    
    
    /* 근무시간 중의 일 처리량 조회 프로시저 */
    
    PROCEDURE PROC_SEL_EMP_WELLWORK
    (
        O_RST           OUT     SYS_REFCURSOR
    );
END PKG_EMP_MANAGE;

/
--------------------------------------------------------
--  DDL for Package PKG_ETC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_ETC" AS 

  /* 지역별 쌓은 포인트 */ 
  PROCEDURE PROC_STOCK_POINT
  (
    IN_CUS_ADDR         IN          VARCHAR2,
    O_CUR               OUT         SYS_REFCURSOR
  );

END PKG_ETC;

/
--------------------------------------------------------
--  DDL for Package PKG_EVENT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_EVENT" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

  --EVENT 데이터 단순 INSERT 및 수정
  PROCEDURE PROC_MOD_EVENT
  (
        IN_EVENT_ID         IN   VARCHAR2,
        IN_EVENT_CONTENTS   IN   VARCHAR2,
        IN_EVENT_DATE       IN   VARCHAR2,
        IN_EVENT_DIS_RATE   IN   NUMBER,
        IN_EVENT_DIS_GRD    IN   VARCHAR2,
        IN_MULTI_GRD_YN       IN   NUMBER,
        IN_EXCEPT_GRD1      IN   VARCHAR2,
        IN_EXCEPT_GRD2      IN   VARCHAR2        
  );

--EVENT SELECT검색  
  PROCEDURE PROC_SEL_EVENT
  (
        IN_EVENT_ID         IN      VARCHAR2,
        IN_EVENT_CONTENTS   IN      VARCHAR2,
        IN_EVENT_DATE       IN      VARCHAR2,
        IN_EVENT_DIS_RATE   IN      NUMBER,
        IN_EVENT_MAX_RATE   IN      NUMBER,
        IN_EVENT_MIN_RATE   IN      NUMBER,
        IN_EVENT_DIS_GRD       IN      VARCHAR2,
        O_RST               OUT     SYS_REFCURSOR
  );

--EVENT DELETE
    PROCEDURE PROC_DEL_EVENT
    (
        IN_EVENT_ID     IN      VARCHAR2,
        IN_EVENT_DIS_GRD    IN  VARCHAR2
    );
END PKG_EVENT;

/
--------------------------------------------------------
--  DDL for Package PKG_GROUP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_GROUP" AS 


 /* 그룹테이블 추가 수정 프로시저 */

  PROCEDURE PROC_MOD_GROUP_TBL
  (
    IN_GROUP_ID             IN              VARCHAR2,
    IN_GROUP_NAME           IN              VARCHAR2
    --IN_GROUP_SEQ           IN              NUMBER  
  );

  /* 그룹 테이블 조회 프로시저 */

    PROCEDURE PROC_SEL_GROUP_TBL
    (
        IN_GROUP_ID         IN          VARCHAR2,
        IN_GROUP_NAME       IN          VARCHAR2,
        O_CUR               OUT         SYS_REFCURSOR
    );
    /* 그룹 테이블 삭제 프로시저 */

    PROCEDURE PROC_DEL_GROUP_TBL
    (
        IN_GROUP_ID         IN          VARCHAR2
    );


END PKG_GROUP;

/
--------------------------------------------------------
--  DDL for Package PKG_MENU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_MENU" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
PROCEDURE PROC_MOD_MENU
  (
        IN_MENU_ID       IN      VARCHAR2,
        IN_MENU_PART_ID IN      VARCHAR2,
        IN_MENU_NAME     IN      VARCHAR2,
        IN_MENU_SIZE     IN      VARCHAR2,
        IN_MENU_HC      IN      VARCHAR2,
        IN_MENU_PRICE    IN      VARCHAR2,
        IN_MENU_CONTENTS     IN      VARCHAR2
  );

PROCEDURE PROC_SEL_MENU
(
        IN_MENU_ID          IN      VARCHAR2,
        IN_MENU_PART_ID     IN      VARCHAR2,
        IN_MENU_PART_TXT    IN      VARCHAR2,
        IN_MENU_NAME        IN      VARCHAR2,
        IN_MENU_SIZE        IN      VARCHAR2,
        IN_MENU_HC          IN      VARCHAR2,
        IN_MAX_MENU_PRICE    IN      NUMBER,
        IN_MIN_MENU_PRICE    IN      NUMBER,
        O_RST               OUT     SYS_REFCURSOR
)
;

PROCEDURE PROC_DEL_MENU
(
    IN_MENU_ID      IN      VARCHAR2

);

END PKG_MENU;

/
--------------------------------------------------------
--  DDL for Package PKG_PRICE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_PRICE" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
  --PRICE 데이터 생성
  PROCEDURE PROC_INS_PRICE
  (
     IN_ORD_ID       IN      VARCHAR2,
     IN_POINT        IN      NUMBER,
     O_VAR           OUT     VARCHAR2
  );

  --PRICE 데이터 매우 간단한 SELECT
  PROCEDURE PROC_SEL_PRICE
  (
    IN_ORD_ID       IN      VARCHAR2,
    IN_EVENT_ID     IN      VARCHAR2,
    IN_DIS_COM_ID   IN      VARCHAR2,
    IN_USE_POINT    IN      NUMBER,
    IN_ORD_PRICE    IN      NUMBER,
    IN_PAY_PRICE    IN      NUMBER,
    O_RST           OUT      SYS_REFCURSOR
  );

  PROCEDURE PROC_DEL_PRICE
  (
    IN_ORD_ID       IN      VARCHAR2
  );
  
  PROCEDURE PROC_SEL_TLT
  (
    O_SEL_TLT   OUT      NUMBER
  );
  
END PKG_PRICE;

/
--------------------------------------------------------
--  DDL for Package PKG_RANK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_RANK" AS 
    /* 많이 팔린 메뉴 순위 조회 프로시저 */
  PROCEDURE PROC_MENU_RNK
  (
    O_CUR           OUT         SYS_REFCURSOR
  );
  
  /* 주문을 많이 한 지역 순위 조회 프로시저 */
  PROCEDURE PROC_BUY_REGION_RNK
  (
    O_CUR           OUT         SYS_REFCURSOR
  );
  /* 시간대별 매출액 순위 조회 프로시저 */
  PROCEDURE PROC_SALE_BY_TIME
  (
    O_CUR           OUT         SYS_REFCURSOR
  );
    /* 환불된 메뉴 갯수와 순위 */
    PROCEDURE PROC_SEL_REFUND_MN
    (
        O_RST       OUT     SYS_REFCURSOR
    );
    
    /* 시간대별 주문횟수와 메뉴량 조회*/
    PROCEDURE PROC_SALE_PERHOUR
    (
        IN_CUS_ID       IN      VARCHAR2,
        O_RST           OUT     SYS_REFCURSOR
    );
END PKG_RANK;

/
--------------------------------------------------------
--  DDL for Package PKG_SALARY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_SALARY" AS 

    /* SALARY_TBL 추가 프로시저 */

    PROCEDURE PROC_INS_SALARY_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        --IN_SAL_TLT          IN          NUMBER,
        IN_SAL_MON          IN          VARCHAR2,
        IN_SAL_DATE         IN          VARCHAR2,
        O_ERRMSG            OUT         VARCHAR2
    );


    /* SALARY_TBL 조회 프로시저 */

    PROCEDURE PROC_SEL_SALARY_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        IN_EMP_NAME         IN          VARCHAR2,
        IN_SAL_MON          IN          VARCHAR2,
        O_CUR               OUT         SYS_REFCURSOR,
        O_ERRMSG            OUT         VARCHAR2
    );

    /* SALARY_TBL 수정 프로시저 */

    PROCEDURE PROC_UP_SALARY_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        CHG_EMP_ID          IN          VARCHAR2,
        IN_SAL_IDX          IN          NUMBER,
        IN_SAL_TLT          IN          NUMBER,
        IN_SAL_MON          IN          VARCHAR2,
        IN_SAL_DATE         IN          VARCHAR2,
        O_ERRMSG            OUT         VARCHAR2
    );

    /* SALARY_TBL 삭제 프로시저 */

    PROCEDURE PROC_DEL_SALARY_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        IN_SAL_IDX          IN          NUMBER,
        O_ERRMSG            OUT         VARCHAR2
    );
END PKG_SALARY;

/
--------------------------------------------------------
--  DDL for Package PKG_SALE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_SALE" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 

  --주문 INSERT 

    PROCEDURE PROC_INS_SALE
(
    IN_ORD_ID   IN      VARCHAR2,
	IN_CUS_ID		IN		VARCHAR2,
	IN_MENU_ID		IN		VARCHAR2,
	IN_MENU_QTY	IN		NUMBER,
	IN_ORD_PART	IN		VARCHAR2,
	IN_ORD_DATE	IN		VARCHAR2,       --'YYYY-MM-DD HH24:MI:SS'
	IN_REFUND_YN	IN		VARCHAR2

)
;

    PROCEDURE PROC_REFUND_SALE
    (
        IN_ORD_ID       IN      VARCHAR2,
        IN_ORD_IDX      IN      NUMBER
    );


END PKG_SALE;

/
--------------------------------------------------------
--  DDL for Package PKG_TIMETABLE_TBL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_TIMETABLE_TBL" AS 

		/* TIMETABLE_TBL INSERT 프로시저 */

		PROCEDURE PROC_INS_TIMETABLE_TBL
		(
			IN_EMP_ID					IN					VARCHAR2,
			IN_IN_TIME					IN					VARCHAR2,
			IN_OUT_TIME				IN					VARCHAR2,
			IN_WORK_DATE			IN					VARCHAR2,
			IN_TT_CONTENTS			IN					VARCHAR2
		);

		/* TIMETABLE_TBL UPDATE 프로시저 */

		PROCEDURE PROC_UP_TIMETABLE_TBL
		(
			IN_EMP_ID					IN					VARCHAR2,
			IN_IN_TIME					IN					VARCHAR2,
			IN_OUT_TIME				IN					VARCHAR2,
			IN_WORK_DATE			IN					VARCHAR2,
			IN_TT_CONTENTS			IN					VARCHAR2
		);

		/* TIMETABLE_TBL SELECT 프로시저 */

		PROCEDURE PROC_SEL_TIMETABLE_TBL
		(
			IN_EMP_ID				IN					VARCHAR2,
			WORKING_TIME		IN					VARCHAR2,
			IN_WORK_DATE		IN					VARCHAR2,
			IN_IN_TIME				IN					VARCHAR2,
			IN_OUT_TIME			IN					VARCHAR2,
			O_CUR					OUT				SYS_REFCURSOR
		);

		/* TIMETABLE_TBL DELETE 프로시저 */

		PROCEDURE PROC_DEL_TIMETABLE_TBL
		(
			IN_EMP_ID				IN					VARCHAR2,
			IN_WORK_DATE		IN					VARCHAR2
		);

END PKG_TIMETABLE_TBL;

/
--------------------------------------------------------
--  DDL for Package PKG_WORK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PKG_WORK" AS 

    /* WORK_TLB 추가 프로시저 */

    PROCEDURE PROC_INS_WORK_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        IN_WORK_DATE        IN          VARCHAR2,
        IN_WORK_TIME        IN          VARCHAR2,
        IN_WORK_IO          IN          VARCHAR2

    );

    /* WORK_TLB 조회 프로시저 */

    PROCEDURE PROC_SEL_WORK_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
		IN_EMP_NAME           IN          VARCHAR2,
		IN_WORK_DATE	IN 		  VARCHAR2,
		IN_DIST_IO			IN 			VARCHAR2,
        O_CUR               OUT         SYS_REFCURSOR
    );

    /* WORK_TBL 수정 프로시저 */
    PROCEDURE PROC_UP_WORK_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        CHG_EMP_ID          IN          VARCHAR2,
        IN_WORK_DATE        IN          VARCHAR2,
        IN_WORK_TIME        IN          VARCHAR2,
        IN_WORK_IO          IN          VARCHAR2,
        IN_WORK_IDX         IN          NUMBER
    );

    /* WORK_TBL 삭제 프로시저 */
    PROCEDURE PROC_DEL_WORK_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        IN_WORK_IDX         IN          NUMBER
    );

END PKG_WORK;

/
--------------------------------------------------------
--  DDL for Package PROC_POINT_TBL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "PROC_POINT_TBL" AS 

    PROCEDURE PROC_POINT_TBL_INSERT
    (
    IN_ORD_ID	        IN          VARCHAR2,
    IN_CUS_ID	        IN          VARCHAR2,
    IN_SAVE_POINT	    IN          NUMBER,
    IN_SAVE_DATE	    IN          VARCHAR2,
    IN_USE_POINT_YN	    IN          VARCHAR2
    );
    /*
    PROCEDURE PROC_POINT_TBL_UPDATE
    (
    IN_ORD_F_ID	        IN          CHAR,
    IN_ORD_S_ID         IN          CHAR,
    M_MSG               OUT         VARCHAR2
    --IN_CUS_ID	        IN          CHAR,
    --IN_SAVE_POINT	    IN          NUMBER,
    --IN_SAVE_DATE	    IN          VARCHAR2,
    --IN_USE_POINT_YN	IN          CHAR
    );

    PROCEDURE PROC_POINT_TBL_DEL
    (
    --IN_ORD_ID	        IN          CHAR,
    --IN_CUS_ID	        IN          CHAR,
    --IN_SAVE_POINT	    IN          NUMBER,
    IN_SAVE_DATE	    IN          VARCHAR2,
    IN_USE_POINT_YN	IN          CHAR
    );
    */

END PROC_POINT_TBL;

/
--------------------------------------------------------
--  DDL for Package Body PKG_COMMONS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_COMMONS" AS

    /* 공통 테이블 추가 프로시저 */

  PROCEDURE PROC_INS_COMMONS_TBL
  (
    IN_COM_VAL          IN          VARCHAR2,
    IN_COM_LVL          IN          NUMBER,
    IN_PARRENT_ID       IN          VARCHAR2,
    IN_GROUP_ID         IN          VARCHAR2,
    IN_EXCEPT1          IN          VARCHAR2,
    IN_EXCEPT2          IN          VARCHAR2,
    O_MSG               OUT         VARCHAR2
  )
  AS

    V_COM_ID            CHAR(6);
    V_COM_SEQ           NUMBER(3);
    CHK_VAL             NUMBER(1);     -- 같은 COM_VAL값이 들어가는 것을 확인하기 위한 

  BEGIN

   -- COM_ID 자동 생성

   SELECT 'COM'||TO_CHAR(TO_NUMBER(NVL(SUBSTR(MAX(COM_ID),4),0))+1,'FM000')
   INTO V_COM_ID
   FROM COMMONS_TBL
   ;

   -- COM_SEQ 자동 생성

   SELECT NVL(MAX(COM_SEQ),0)+1 
   INTO V_COM_SEQ
   FROM COMMONS_TBL
   WHERE GROUP_ID = IN_GROUP_ID
   AND COM_LVL = IN_COM_LVL
   ;

   -- 동일 이름 방지 카운트
   SELECT COUNT(*)
   INTO CHK_VAL
   FROM COMMONS_TBL
   WHERE COM_VAL = IN_COM_VAL
   ;

   IF CHK_VAL = 0 THEN  --같은 이름이 없으면  INSERT

       INSERT INTO COMMONS_TBL
       (COM_ID, COM_VAL, COM_LVL, COM_SEQ, PARENT_ID, GROUP_ID, EXCEPT1,EXCEPT2)
       VALUES
       (V_COM_ID, IN_COM_VAL, IN_COM_LVL, V_COM_SEQ, IN_PARRENT_ID, IN_GROUP_ID, IN_EXCEPT1, IN_EXCEPT2)
       ;

   ELSE --같은 이름이 있을 때

    O_MSG := '동일한 이름이 존재합니다.';

   END IF;
  END PROC_INS_COMMONS_TBL;

  /* 공통 테이블 조회 프로시저 */
  PROCEDURE PROC_SEL_COMMONS_TBL
  (
    O_CUR               OUT         SYS_REFCURSOR
  )
  AS

  BEGIN

    OPEN O_CUR FOR
    SELECT  LPAD(' ', T1.COM_LVL * 2) || DECODE(COM_LVL,1,'','└ ')||T1.COM_VAL
    FROM COMMONS_TBL T1, GROUP_TBL T2
    WHERE T1.GROUP_ID = T2.GROUP_ID
    START WITH T1.PARENT_ID = 'COM000'
    CONNECT BY PRIOR T1.COM_ID = T1.PARENT_ID
    ORDER SIBLINGS BY T1.COM_SEQ
    ;

  END PROC_SEL_COMMONS_TBL;

  /* 공통 테이블 수정 프로시저 */
  PROCEDURE PROC_UP_COMMONS_TBL
  (
    IN_COM_ID           IN          VARCHAR2, --기존 아이디
    CHG_COM_ID          IN          VARCHAR2, --새로운 아이디
    IN_COM_VAL          IN          VARCHAR2,
    IN_COM_LVL          IN          NUMBER,
    IN_COM_SEQ          IN          NUMBER,
    IN_PARENT_ID        IN          VARCHAR2,
    IN_GROUP_ID         IN          VARCHAR2,
    IN_EXCEPT1          IN          VARCHAR2,
    IN_EXCEPT2          IN          VARCHAR2   
  )
  AS

  BEGIN
    -- 공통 테이블 수정 
    UPDATE COMMONS_TBL
    SET COM_ID = CHG_COM_ID,
        COM_VAL= IN_COM_VAL,
        COM_LVL= IN_COM_LVL,
        COM_SEQ= IN_COM_SEQ,
        PARENT_ID = IN_PARENT_ID,
        GROUP_ID = IN_GROUP_ID,
        EXCEPT1 = IN_EXCEPT1,
        EXCEPT2 = IN_EXCEPT2
    WHERE COM_ID = IN_COM_ID
    ;

    /* MENU_TBL 공통코드(메뉴구분) 수정

    UPDATE MENU_TBL
    SET MENU_PART_ID = CHG_COM_ID
    WHERE MENU_PART_ID = IN_COM_ID
    ;

    */

    UPDATE EMPLOYEE_TBL
    SET EMP_POS = CHG_COM_ID
    WHERE EMP_POS = IN_COM_ID
    ;

    /* EVENT_TBL 공통코드(주문구분) 수정 

    UPDATE EVENT_TBL
    SET ORDER_PART = CHG_COM_ID
    WHERE ORDER_PART = IN_COM_ID
    ;

    */
    /* SALE_TBL 공통코드(주문구분) 수정
    UPDATE SALE_TBL
    SET ORD_PART = CHG_COM_ID
    WHERE ORD_PART = IN_COM_ID
    ;
    */

  END PROC_UP_COMMONS_TBL;

  /* 공통 테이블 삭제 프로시저 */  

  PROCEDURE PROC_DEL_COMMONS_TBL
  (
    IN_COM_ID           IN          VARCHAR2
  )
  AS
    V_GROUP_ID           VARCHAR2(4);       -- 선택한 COM_ID의 그룹 아이디
    V_COM_LVL            NUMBER(3);         -- 선택한 COM_ID의 레벨
    V_COM_SEQ            NUMBER(3);         -- 선택한 COM_ID의 시퀀스
  BEGIN

    -- 선택한 COM_ID의 레벨
    SELECT COM_LVL
    INTO V_COM_LVL
    FROM COMMONS_TBL
    WHERE COM_ID = IN_COM_ID
    ;
    -- 선택한 COM_ID의 그룹 아이디
    SELECT GROUP_ID
    INTO V_GROUP_ID
    FROM COMMONS_TBL
    WHERE COM_ID = IN_COM_ID
    ;

    -- 선택한 COM_ID의 시퀀스
    SELECT COM_SEQ
    INTO V_COM_SEQ
    FROM COMMONS_TBL
    WHERE COM_ID = IN_COM_ID
    ;

    DELETE COMMONS_TBL
    WHERE COM_ID = IN_COM_ID
    ;

    --선택한 COM_ID가 삭제 되었을 때, 같은 그룹아이디와 같은 레벨의 선택된 시퀀스보다 큰 시퀀스 -1
    UPDATE COMMONS_TBL
    SET COM_SEQ = COM_SEQ-1
    WHERE GROUP_ID =  V_GROUP_ID
    AND   COM_LVL  =  V_COM_LVL
    AND   COM_SEQ > V_COM_SEQ
    ;

    -- COMMONS_TBL에서 데이터가 삭제 되었을 때, 공통코드가 들어간 테이블의 공통코드 ' '값으로 처리

    /* MENU_TBL 공통코드(메뉴구분) 수정

    UPDATE MENU_TBL
    SET MENU_PART_ID = ' '
    WHERE MENU_PART_ID = IN_COM_ID
    ;

    */

    UPDATE EMPLOYEE_TBL
    SET EMP_POS = ' '
    WHERE EMP_POS = IN_COM_ID
    ;

    /* EVENT_TBL 공통코드(주문구분) 수정 

    UPDATE EVENT_TBL
    SET ORDER_PART = ' '
    WHERE ORDER_PART = IN_COM_ID
    ;

    */
    /* SALE_TBL 공통코드(주문구분) 수정
    UPDATE SALE_TBL
    SET ORD_PART = ' '
    WHERE ORD_PART = IN_COM_ID
    ;
    */

  END PROC_DEL_COMMONS_TBL;

END PKG_COMMONS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_COMPANY_MANAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_COMPANY_MANAGE" AS

    /* 재료구매와 판매에 따른 재고관리 */ 
  PROCEDURE PROC_STOCK_MNG
    (
        IN_MAT_ID       IN      VARCHAR2,
        O_CUR           OUT     SYS_REFCURSOR
    ) AS
  BEGIN
    OPEN O_CUR FOR
    SELECT TBL1.MAT_ID, TBL1.MAT_NAME, SUM((TBL1.TLT_BUY - TBL2.SALE_QTY) * 0.001) MATERIAL
        FROM
        (
        SELECT T1.MAT_ID, T1.MAT_NAME, SUM(1000 * T1.MAT_CONTENTS * T2.MAT_QTY) TLT_BUY
        FROM MATERIAL_TBL T1, BUY_TBL T2
        WHERE T1.MAT_ID = T2.MAT_ID
        GROUP BY T1.MAT_ID, T1.MAT_NAME
        ORDER BY MAT_ID
        )TBL1, -- 구매한 재료 수량
        (
        SELECT B.MAT_ID, SUM(SALE_CNT * QTY) SALE_QTY
        FROM
            (
            SELECT MENU_ID, COUNT(MENU_ID) SALE_CNT
            FROM SALE_TBL
            GROUP BY MENU_ID
            )A,
            (
            SELECT MENU_ID, MAT_ID, SUM(MAT_QTY) QTY
            FROM RECIPE_TBL
            GROUP BY MENU_ID, MAT_ID
            ORDER BY MENU_ID
            )B -- 메뉴별 필요한 재료 수량
            WHERE A.MENU_ID = B.MENU_ID
            GROUP BY B.MAT_ID
            ORDER BY MAT_ID
        )TBL2 -- 판매한 재료 수량
        WHERE TBL1.MAT_ID = TBL2.MAT_ID
    GROUP BY TBL1.MAT_ID, TBL1.MAT_NAME
    ORDER BY MAT_ID
    ;
  END PROC_STOCK_MNG;
  
    /* 판매구분에 따른 매출 */
    
    PROCEDURE PROC_ORDER_PART -- 판매구분에 따른 매출
    (
        IN_COM_ID       IN          VARCHAR2,
        O_CUR           OUT         SYS_REFCURSOR
    )
    
    AS
    
    
    BEGIN
    
    OPEN O_CUR FOR
    
        
        SELECT TT1.COM_VAL, TO_CHAR(SUM(TT2.PAY_PRICE), '999,999,999')
        FROM
        (
        SELECT T2.ORD_ID, T2.ORD_PART, T1.COM_VAL, SUM(T2.MENU_QTY)
        FROM COMMONS_TBL T1, SALE_TBL T2
        WHERE T1.COM_ID = T2.ORD_PART
        GROUP BY T2.ORD_ID, T2.ORD_PART, T1.COM_VAL
        )TT1, -- 주문번호별 판매구분
        PRICE_TBL TT2 -- 가격 테이블
        WHERE TT1.ORD_ID = TT2.ORD_ID
        GROUP BY TT1.COM_VAL
        ;
    
    
    END PROC_ORDER_PART;
    
    /* 총 수익과 영업이익 */
    
     PROCEDURE PROC_REVENUE
    (
        O_CUR       OUT         SYS_REFCURSOR
    )
    
    AS
        
        V_TLT_ORD_PRICE         NUMBER(7);
        V_TLT_COST              NUMBER(7);
        V_TLT_MAT               NUMBER(7);
        V_SAL_TLT               NUMBER(7);
    
    
    BEGIN
    
    
        -- 총 수입
        SELECT SUM(ORD_PRICE) TLT_ORD_PRICE
        INTO V_TLT_ORD_PRICE
        FROM PRICE_TBL 
        ;
    
        -- 경비사용
        SELECT SUM(TLT_COST)
        INTO V_TLT_COST
        FROM
            (
            SELECT COST_ID, SUM(COST_PRICE * COST_QTY) TLT_COST
            FROM COST_TBL
            GROUP BY COST_ID
            )
        ;
    
        -- 재료구매
        SELECT SUM(TLT_MAT)
        INTO V_TLT_MAT
        FROM
            (
            SELECT MAT_ID, SUM(MAT_PRICE * MAT_QTY) TLT_MAT
            FROM BUY_TBL
            GROUP BY MAT_ID
            )
        ;
    
        -- 급여
        SELECT SUM(SAL_TLT) 
        INTO V_SAL_TLT
        FROM SALARY_TBL
        ;
    
        OPEN O_CUR FOR
        SELECT TO_CHAR(SUM(V_TLT_ORD_PRICE - (V_TLT_COST + V_TLT_MAT + V_SAL_TLT)), '999,999,999') TLT_REVENUR
        FROM DUAL
        ;
    
    END PROC_REVENUE;

END PKG_COMPANY_MANAGE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_CUSTOMER
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_CUSTOMER" AS

--  CUSTOMER 데이터 삽입 및 수정
  PROCEDURE PROC_MOD_CUSTOEMR
  (
        IN_CUS_ID       IN      VARCHAR2,
        IN_CUS_NAME     IN      VARCHAR2,
        IN_CUS_ADDR     IN      VARCHAR2,
        IN_CUS_TEL      IN      VARCHAR2,
        IN_CUS_BIRTH    IN      VARCHAR2,
         IN_CUS_GRADE    IN      VARCHAR2,
        IN_CUS_CONTENTS     IN      VARCHAR2,
        O_MSG             OUT       VARCHAR2
  ) 
  AS
    V_CUS_ID        CHAR(6);
  BEGIN
    --CUSTOMER아이디 생성
    SELECT  'CUS' || TO_CHAR(TO_NUMBER(SUBSTR(NVL(MAX(CUS_ID),'CUS000'),4))+1,'FM000')
    INTO V_CUS_ID
    FROM CUSTOMER_TBL
    ;

    --NULL값이면 원래의 값이 들어가도록 NVL
    MERGE INTO CUSTOMER_TBL
    USING DUAL
    ON (CUS_ID = IN_CUS_ID)
    WHEN MATCHED THEN
        UPDATE SET CUS_NAME = NVL(IN_CUS_NAME,CUS_NAME),
                    CUS_ADDR = NVL(IN_CUS_ADDR,CUS_ADDR),
                    CUS_TEL = NVL(IN_CUS_TEL,CUS_TEL),
                    CUS_BIRTH = NVL(IN_CUS_BIRTH,CUS_BIRTH),
                    CUS_GRADE = NVL(IN_CUS_GRADE,CUS_GRADE),
                    CUS_CONTENTS = NVL(IN_CUS_CONTENTS,CUS_CONTENTS)
    WHEN NOT MATCHED THEN
        INSERT 
        (CUS_ID,CUS_NAME,CUS_ADDR,CUS_TEL,CUS_BIRTH,CUS_GRADE,CUS_CONTENTS)
        VALUES
        (V_CUS_ID,IN_CUS_NAME,IN_CUS_ADDR,IN_CUS_TEL,IN_CUS_BIRTH,'COM009',IN_CUS_CONTENTS)
--(V_CUS_ID,IN_CUS_NAME,IN_CUS_ADDR,IN_CUS_TEL,IN_CUS_BIRTH,NVL(IN_CUS_USE_POINT,0),IN_CUS_CONTENTS)
--첫 가입은 포인트가 0일꺼니까 제일 낮은 COM009등급을 디폴트로 주었음
        ;
   --이름 주소 등등 길이가 길어지면 에러가 나니까 나중에 EXCEPTION처리 해야한다. 

       EXCEPTION 
            WHEN OTHERS THEN
           -- O_ERRCODE := '100';
             O_MSG := '에러발생';
--        WHEN NO_DATA_FOUND THEN
--            O_ERRCODE := '001';
--            O_MSG := '해당테이블에서 데이터를 찾을 수 없음';
--        WHEN ZERO_DIVIDE THEN
--            O_ERRCODE :='002';
--            O_MSG :='ZERO_DIVEDE';


  END PROC_MOD_CUSTOEMR;

   --CUSTOMER SELECT,검색
    PROCEDURE PROC_SEL_CUSTOMER
  (
        IN_CUS_ID       IN      VARCHAR2,
        IN_CUS_NAME     IN      VARCHAR2,
        IN_CUS_ADDR     IN      VARCHAR2,
        IN_CUS_TEL      IN      VARCHAR2,
        IN_CUS_BIRTH    IN      VARCHAR2,
        IN_CUS_GRADE    IN      VARCHAR2,   --COM_ID 공통코드 값으로 IN
        O_RST           OUT     SYS_REFCURSOR
    )    
    AS

    BEGIN

    OPEN O_RST FOR

        SELECT T2.CUS_ID, T2.CUS_NAME, T2.CUS_ADDR, T2.CUS_TEL, T2.CUS_BIRTH, T1.COM_VAL
         FROM COMMONS_TBL T1, CUSTOMER_TBL T2
         WHERE T1.COM_ID = T2.CUS_GRADE
         AND T2.CUS_ID LIKE '%'||IN_CUS_ID ||'%'
         AND T2.CUS_NAME =  '%'||IN_CUS_NAME||'%'
         AND T2.CUS_ADDR = '%'|| IN_CUS_ADDR||'%'
         AND T2.CUS_TEL = '%'||IN_CUS_TEL||'%'
         AND T2.CUS_BIRTH = '%'||IN_CUS_BIRTH||'%'
         AND T1.COM_ID = '%'||IN_CUS_GRADE||'%'
 ;

    END PROC_SEL_CUSTOMER;

    --CUSTOMER 삭제
    PROCEDURE PROC_DEL_CUSTOMER
    (
        IN_CUS_ID       IN      VARCHAR2
    )
    AS

    BEGIN
        DELETE FROM CUSTOMER_TBL
        WHERE CUS_ID = IN_CUS_ID
        ;
        --판매 및 포인트에서도 UPDATE DELETE
        /*
        UPDATE SALE_TBL
        SET CUS_ID = 'DELETE'
        WHERE CUS_ID = IN_CUS_ID

        UPDATE POINT_TBL
        SET CUS_ID = 'DELETE'
        WHERE CUS_ID = IN_CUS_ID
        */

    END PROC_DEL_CUSTOMER
    ;
END PKG_CUSTOMER;

/
--------------------------------------------------------
--  DDL for Package Body PKG_CUS_MANAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_CUS_MANAGE" AS
    /* 각 고객들이 가장 많이 주문한 메뉴 조회 프로시저 */
  PROCEDURE PROC_BEST_MENU_BY_CUS
    (
        O_CUR       OUT         SYS_REFCURSOR
    ) 
    AS
  BEGIN
    OPEN O_CUR FOR
    SELECT B.CUS_ID 고객ID, B.CUS_NAME 고객명, A.MENU_ID ,C.MENU_NAME 선호메뉴
    FROM
    (
        SELECT *
        FROM
        (
            SELECT T1.CUS_ID, T1.MENU_ID, COUNT(*) AS QTY , ROW_NUMBER() OVER(PARTITION BY CUS_ID ORDER BY COUNT(*) DESC) RNK
            FROM SALE_TBL T1, MENU_TBL T2
            WHERE T1.MENU_ID = T2.MENU_ID 
            AND T1.REFUND_YN ='N'
            AND T2.MENU_HC IS NOT NULL -- 굿즈 제외
            GROUP BY  T1.CUS_ID, T1.MENU_ID
        )
        WHERE RNK = 1
    )A, CUSTOMER_TBL B, MENU_TBL C
    WHERE A.CUS_ID(+) = B.CUS_ID AND A.MENU_ID = C.MENU_ID(+)
    ORDER BY A.CUS_ID
    ;
  END PROC_BEST_MENU_BY_CUS;
  
    /* 환불 많이 한 고객 점수 */
  
    PROCEDURE PROC_REFUND_CNT -- 환불 많이 한 고객 점수
    (
        IN_CUS_ID       IN          VARCHAR2,
        O_CUR           OUT         SYS_REFCURSOR
    )
    
    AS
    
    
    BEGIN
    
        OPEN O_CUR FOR
        
        SELECT T1.CUS_ID, T1.CUS_NAME, COUNT(T2.REFUND_YN) REFUND_CNT
        FROM CUSTOMER_TBL T1, SALE_TBL T2
        WHERE T1.CUS_ID = T2.CUS_ID
        AND T2.REFUND_YN = 'Y'
        GROUP BY T1.CUS_ID, T1.CUS_NAME
      ;
    
    
    END PROC_REFUND_CNT;
    
    
  /* 고객들의 할인받은 금액 조회 */
  
  PROCEDURE PROC_SEL_DIS_PRICE
  (
        IN_CUS_ID       IN      VARCHAR2,
        IN_CUS_NAME     IN      VARCHAR2, 
        O_RST           OUT     SYS_REFCURSOR
  )
  AS
  BEGIN
    OPEN O_RST FOR
    SELECT T3.CUS_ID,T3.CUS_NAME ,NVL(SUM(T2.SALE_PRICE),-1) AS DIS_PRICE
           , RANK()OVER(ORDER BY NVL(SUM(T2.SALE_PRICE),-1) DESC) AS DIS_RNK -- -1은 구매내역 없음 
    FROM 
    (
        SELECT ORD_ID, CUS_ID
        FROM SALE_TBL
        GROUP BY ORD_ID, CUS_ID
    ) T1,
    (
        SELECT ORD_ID, EVENT_ID, DIS_COM_ID, USE_POINT, ORD_PRICE
               , PAY_PRICE, ORD_PRICE - (PAY_PRICE + USE_POINT) AS SALE_PRICE 
        FROM PRICE_TBL
    )T2
    ,CUSTOMER_TBL T3
    WHERE T1.ORD_ID = T2.ORD_ID(+)
    AND  T3.CUS_ID = T1.CUS_ID(+)
    AND T3.CUS_ID LIKE '%'||IN_CUS_ID||'%'
    AND T3.CUS_NAME LIKE  '%'||IN_CUS_NAME||'%'
    GROUP BY T3.CUS_ID,T3.CUS_NAME
    ;
  END PROC_SEL_DIS_PRICE
  ;
  
  /* 고객들의 환불횟수 조회 프로시저 */
  
    PROCEDURE PROC_SEL_REFUND_PERCUS
  (
        IN_CUS_ID           IN      VARCHAR2,
        IN_CUS_NAME         IN      VARCHAR2,
        O_RST               OUT     SYS_REFCURSOR
  )
  AS
  
  BEGIN
    OPEN O_RST FOR
        SELECT T1.CUS_ID,T1.CUS_NAME , COUNT(T2.CUS_ID) AS REFUND_CNT
        FROM 
        CUSTOMER_TBL T1,
        (                                                       --같은 주문번호는 환불 1번으로 취급
            SELECT CUS_ID, ORD_ID, COUNT(ORD_ID) 
            FROM SALE_TBL
            WHERE REFUND_YN = 'Y'
            GROUP BY CUS_ID,ORD_ID
        )T2
        WHERE T1.CUS_ID = T2.CUS_ID(+)
        AND T1.CUS_ID LIKE '%'||IN_CUS_ID||'%'
        AND T1.CUS_NAME  LIKE '%'||IN_CUS_NAME||'%'
        GROUP BY T1.CUS_ID,T1.CUS_NAME
        ;
  END PROC_SEL_REFUND_PERCUS
  ;
  
END PKG_CUS_MANAGE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_EMPLOYEE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_EMPLOYEE" AS

  /* EMPLOYEE_TBL 추가 프로시저 */ 

  PROCEDURE PROC_INS_EMPLOYEE_TBL
    (
        IN_EMP_NAME             IN     VARCHAR2,
        IN_EMP_TEL              IN     VARCHAR2,
        IN_EMP_BIRTH            IN     VARCHAR2,
        IN_EMP_POS              IN     VARCHAR2,
        IN_EMP_SALARY           IN     NUMBER,
        IN_EMP_ENTER_DATE       IN     VARCHAR2,
        IN_EMP_LEAVE_DATE       IN     VARCHAR2,
        IN_EMP_CONTENTS         IN     VARCHAR2
    ) 
    AS
    V_EMP_ID            CHAR(6);    -- EMP_ID 자동 생성
  BEGIN
    -- EMP_ID 자동 생성
    SELECT 'EMP'||TO_CHAR(TO_NUMBER(NVL(SUBSTR(MAX(EMP_ID),4),0))+1,'FM000')
    INTO V_EMP_ID
    FROM EMPLOYEE_TBL
    ;
    -- EMPLOYEE_TBL INSERT
    INSERT INTO EMPLOYEE_TBL
    (EMP_ID, EMP_NAME, EMP_TEL, EMP_BIRTH, EMP_POS, EMP_SALARY, EMP_ENTER_DATE, EMP_LEAVE_DATE, EMP_CONTENTS)
    VALUES
    (V_EMP_ID, IN_EMP_NAME, IN_EMP_TEL, IN_EMP_BIRTH, IN_EMP_POS, IN_EMP_SALARY, IN_EMP_ENTER_DATE, IN_EMP_LEAVE_DATE,
    IN_EMP_CONTENTS)
    ;

  END PROC_INS_EMPLOYEE_TBL;

    /* EMPLOYEE_TBL 조회 프로시저 */

    PROCEDURE PROC_SEL_EMPLOYEE_TBL
    (
        IN_EMP_NAME         IN      VARCHAR2,
        O_CUR               OUT     SYS_REFCURSOR
    )
    AS

    BEGIN

        OPEN O_CUR FOR
        SELECT *
        FROM EMPLOYEE_TBL
        WHERE EMP_NAME LIKE '%'||IN_EMP_NAME||'%'
        ;

    END PROC_SEL_EMPLOYEE_TBL;

    /* EMPLOYEE_TBL 수정 프로시저 */

    PROCEDURE PROC_UP_EMPLOYEE_TBL
    (
        IN_EMP_ID               IN     VARCHAR2,    -- 기존 EMP_ID
        CHG_EMP_ID              IN     VARCHAR2,    -- 새로운 EMP_ID
        IN_EMP_NAME             IN     VARCHAR2,
        IN_EMP_TEL              IN     VARCHAR2,
        IN_EMP_BIRTH            IN     VARCHAR2,
        IN_EMP_POS              IN     VARCHAR2,
        IN_EMP_SALARY           IN     NUMBER,
        IN_EMP_ENTER_DATE       IN     VARCHAR2,
        IN_EMP_LEAVE_DATE       IN     VARCHAR2,
        IN_EMP_CONTENTS         IN     VARCHAR2
    )
    AS

    BEGIN
        -- EMPLOYEE_TBL 수정
        UPDATE EMPLOYEE_TBL
        SET EMP_ID = CHG_EMP_ID,
            EMP_NAME = IN_EMP_NAME,
            EMP_TEL  = IN_EMP_TEL,
            EMP_BIRTH = IN_EMP_BIRTH,
            EMP_POS = IN_EMP_POS,
            EMP_SALARY = IN_EMP_SALARY,
            EMP_ENTER_DATE = IN_EMP_ENTER_DATE,
            EMP_LEAVE_DATE = IN_EMP_LEAVE_DATE,
            EMP_CONTENTS = IN_EMP_CONTENTS
        WHERE EMP_ID = IN_EMP_ID
        ;

        -- EMPLOYEE_TBL 의 EMP_ID가 수정 되었을 때, WORK_TBL의 EMP_ID수정
        UPDATE WORK_TBL
        SET EMP_ID = CHG_EMP_ID
        WHERE EMP_ID = IN_EMP_ID
        ;

        -- EMPLOYEE_TBL 의 EMP_ID가 수정 되었을 때, SALARY_TBL의 EMP_ID수정
        UPDATE SALARY_TBL
        SET EMP_ID = CHG_EMP_ID
        WHERE EMP_ID = IN_EMP_ID
        ;


    END PROC_UP_EMPLOYEE_TBL;

    /* EMPLOYEE_TBL 직원 퇴사일 입력 프로시저 */

    PROCEDURE PROC_LEAVE_EMPLOYEE_TBL
    (
        IN_EMP_ID               IN      VARCHAR2,
        IN_EMP_LEAVE_DATE       IN      VARCHAR2
    )
    AS

    BEGIN

        -- 퇴사일 업데이트
        UPDATE EMPLOYEE_TBL
        SET EMP_LEAVE_DATE = IN_EMP_LEAVE_DATE
        WHERE EMP_ID = IN_EMP_ID
        ;

    END PROC_LEAVE_EMPLOYEE_TBL;

    /* EMPLOYEE_TBL 삭제 프로시저 */

    PROCEDURE PROC_DEL_EMPLOYEE_TBL
    (
        IN_EMP_ID               IN      VARCHAR2
    )
    AS

    BEGIN

        -- EMPLOYEE_TBL 삭제
        DELETE EMPLOYEE_TBL
        WHERE EMP_ID = IN_EMP_ID
        ;

        -- WORK_TBL 에서의 선택된 EMP_ID의 데이터 삭제

        /*
        DELETE WORK_TBL
        WHERE EMP_ID = IN_EMP_ID
        ;
        */

        -- SALARY_TBL 에서의 선택된 EMP_ID의 데이터 삭제

        /*
        DELETE SALARY_TBL
        WHERE EMP_ID = IN_EMP_ID
        ;
        */

    END PROC_DEL_EMPLOYEE_TBL;

END PKG_EMPLOYEE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_EMP_MANAGE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_EMP_MANAGE" AS
    /* 월별 가장 매출을 많이 올린 직원에게 지급하는 보너스 조회 프로시저 */ 
  PROCEDURE PROC_GIVE_BONUS
  (
    IN_DATE         IN          VARCHAR2,
    O_CUR           OUT         SYS_REFCURSOR
  ) AS
  BEGIN
     OPEN O_CUR FOR
    SELECT S1.EMP_ID , S2.EMP_NAME ,S1.TLTP2 판매금액, S1.TLTQ2, S1.RNK, S1.TLTQ2*500 지급보너스
    FROM 
    (
    SELECT EMP_ID, SUM(SALEPRICE) AS TLTP2 ,SUM(SALEQTY) TLTQ2 ,RANK() OVER(ORDER BY SUM(SALEPRICE) DESC) RNK
    FROM
    (
        SELECT SD, ST, CASE WHEN INTT<= ST AND ST < OUTT THEN
                        TLTP
                        ELSE 0
                        END AS SALEPRICE
                        ,B.EMP_ID,B.INTT,B.OUTT ,A.TLTQ,
                        CASE WHEN INTT<= ST AND ST < OUTT THEN
                        TLTQ
                        ELSE 0
                        END AS SALEQTY
        FROM
        (
            SELECT SD, ST,SUM(MENU_PRICE * MENU_QTY) TLTP, SUM(MENU_QTY) TLTQ
            FROM
            (
                SELECT T1.MENU_ID,T2.MENU_PRICE, T1.MENU_QTY, TO_CHAR(T1.ORD_DATE,'YYYY-MM-DD')SD,TO_CHAR(T1.ORD_DATE,'HH24') ST
                FROM SALE_TBL T1, MENU_TBL T2
                WHERE T1.MENU_ID = T2.MENU_ID 
                AND T2.MENU_HC IS NOT NULL  -- 굿즈 제외
                AND TO_CHAR(T1.ORD_DATE,'YYYY-MM') =IN_DATE
                AND REFUND_YN='N'
                ORDER BY T1.ORD_DATE
            )
            GROUP BY SD, ST
            ORDER BY SD, ST
        ) A,
        (
            SELECT T1.WORK_DATE,T1.EMP_ID, TO_NUMBER(SUBSTR(T1.WORK_TIME,1,2))+ROUND(TO_NUMBER(SUBSTR(T1.WORK_TIME,4,2))/60*100,-2)/100 INTT
                               ,TO_NUMBER(SUBSTR(T2.WORK_TIME,1,2))+ROUND(TO_NUMBER(SUBSTR(T2.WORK_TIME,4,2))/60*100,-2)/100 OUTT 
            FROM (SELECT * FROM WORK_TBL WHERE WORK_IO ='I')T1,
                 (SELECT * FROM WORK_TBL WHERE WORK_IO ='O')T2
            WHERE T1.WORK_DATE = T2.WORK_DATE AND T1.EMP_ID = T2.EMP_ID
            AND SUBSTR(T1.WORK_DATE,1,7) = IN_DATE
        )B
        WHERE A.SD = B.WORK_DATE 
        ORDER BY SD,ST,B.EMP_ID
    )
    GROUP BY EMP_ID
    ) S1, EMPLOYEE_TBL S2
    WHERE S1.EMP_ID = S2.EMP_ID
    AND RNK = 1
    ;
  END PROC_GIVE_BONUS;


    /* 특정 날짜의 매출이 가장 높았던 시간대에 근무한 직원 조회 프로시저 */
    
  PROCEDURE PROC_EMP_BY_BESTTIME
    (
        IN_DATE         IN          VARCHAR2,
        O_CUR           OUT         SYS_REFCURSOR
    )
    AS
    
    BEGIN
            OPEN O_CUR FOR
            SELECT IN_DATE,S1.TIME1||':00 ~ '||TO_NUMBER(S1.TIME1+1)||':00',TO_CHAR(S1.TLT,'999,999') 매출액,S2.EMP_ID,S2.EMP_NAME, S2.INT||':00 ~ '||S2.OUTT||':00' AS 근무시간  
            FROM
            (
                SELECT IN_DATE,A.TIME1 , NVL(B.TLTP,0)AS TLT , B.RNK
                FROM (SELECT IN_DATE,10+LEVEL-1 AS TIME1 FROM DUAL CONNECT BY LEVEL<=12) A,
                (
                    SELECT TO_CHAR(ORD_DATE,'YYYY-MM-DD')AS SDATE ,TO_CHAR(ORD_DATE,'HH24') AS TIME2,SUM(PAY_PRICE) TLTP, 
                                    RANK() OVER(ORDER BY SUM(PAY_PRICE) DESC) RNK
                    FROM
                    (
                        SELECT T1.ORD_ID,T2.PAY_PRICE, T1.ORD_DATE
                        FROM SALE_TBL T1, PRICE_TBL T2
                        WHERE T1.ORD_ID = T2.ORD_ID
                        AND T1.REFUND_YN='N'
                        AND TO_CHAR(T1.ORD_DATE,'YYYY-MM-DD') =IN_DATE
                        GROUP BY T1.ORD_ID,T2.PAY_PRICE, T1.ORD_DATE
                        ORDER BY T1.ORD_DATE
                    )
                    GROUP BY TO_CHAR(ORD_DATE,'YYYY-MM-DD') ,TO_CHAR(ORD_DATE,'HH24')
                ) B
                WHERE A.TIME1 = B. TIME2(+)
                ORDER BY A.TIME1
            )S1,
            (
                SELECT T1.EMP_ID, T2.EMP_NAME , T1.WORK_DATE ,INT,OUTT
                FROM
                (
                    SELECT A.EMP_ID, A.WORK_DATE, TO_NUMBER(SUBSTR(A.WORK_TIME,1,2))+ROUND(TO_NUMBER(SUBSTR(A.WORK_TIME,4,2))/60*100,-2)/100 INT,
                                                  TO_NUMBER(SUBSTR(B.WORK_TIME,1,2))+ROUND(TO_NUMBER(SUBSTR(B.WORK_TIME,4,2))/60*100,-2)/100 OUTT
        
                    FROM
                    (SELECT * FROM WORK_TBL WHERE WORK_IO='I')A,(SELECT * FROM WORK_TBL WHERE WORK_IO ='O')B
                    WHERE A.WORK_DATE = B.WORK_DATE AND A.EMP_ID = B.EMP_ID
                    AND A.WORK_DATE =IN_DATE
                    ORDER BY A.WORK_DATE ,A.EMP_ID
                ) T1, EMPLOYEE_TBL T2
                WHERE T1.EMP_ID = T2.EMP_ID  
            )S2
            WHERE S1.RNK =1
            AND S1.TIME1 >= S2.INT AND S1.TIME1 < S2.OUTT
            ;
    END PROC_EMP_BY_BESTTIME;
    
    
    /* 직원 결근 조회 프로시저 */
    
      --6. 직원의 결근 조회
  PROCEDURE PROC_SEL_ABS_ATT
  (
        IN_EMP_ID       IN      VARCHAR2,
        IN_CHECK_SUMMARY    IN      NUMBER,         --1: 요약   0:전체
        O_RST           OUT     SYS_REFCURSOR
  )
  AS
  
  BEGIN
    IF IN_CHECK_SUMMARY = 1 THEN
        OPEN O_RST FOR
            --결근한 횟수
        SELECT T1.EMP_ID,COUNT(T1.EMP_ID)
        FROM TIMETABLE_TBL T1, WORK_TBL T2
        WHERE T1.EMP_ID = T2.EMP_ID(+)
        AND T1.WORK_DATE = T2.WORK_DATE(+)
        AND T2.WORK_IDX IS NULL                 --결근
        AND T1.EMP_ID LIKE '%'||IN_EMP_ID||'%' 
        GROUP BY T1.EMP_ID
        ;
    ELSIF IN_CHECK_SUMMARY = 0 THEN
        OPEN O_RST FOR
        SELECT T1.EMP_ID, T1.WORK_DATE, T1.IN_TIME
        FROM TIMETABLE_TBL T1, WORK_TBL T2
        WHERE T1.EMP_ID = T2.EMP_ID(+)
        AND T1.WORK_DATE = T2.WORK_DATE(+)
        AND T2.WORK_IDX IS NULL                 --결근
        AND T1.EMP_ID LIKE '%'||IN_EMP_ID||'%' 
        ;
     END IF;


  END PROC_SEL_ABS_ATT
  ;
  
  /* 직원 지각 조회 프로시저 */
    --6. 직원의 지각 조회
  PROCEDURE PROC_SEL_LATE_ATT
  (
        IN_EMP_ID       IN      VARCHAR2,
        IN_EMP_NAME     IN      VARCHAR2,
        IN_CHECK_SUMMARY    IN      NUMBER,      --1: 요약   0:전체
        O_RST           OUT     SYS_REFCURSOR
  )
   AS
  BEGIN
        -- 요약 선택시의 SELECT
        IF IN_CHECK_SUMMARY = 1 THEN
            OPEN O_RST FOR
            SELECT T1.EMP_ID,T2.EMP_NAME,T2.LATE_CNT,T1.TLT_CNT, ROUND((T2.LATE_CNT/T1.TLT_CNT),2) AS RATE_PCT
            FROM (
                --WORK_TBL 에서 출근한 날만  SELECT
                SELECT EMP_ID, COUNT(EMP_ID) AS TLT_CNT
                FROM  WORK_TBL --TIMETABLE_TBL
                WHERE WORK_IO = 'I'
                GROUP BY EMP_ID
            ) T1, 
            (
                --출근한 날중 지각한 날을 집계함수를 활용해 SELECT
                SELECT T1.EMP_ID AS EMP_ID, T3.EMP_NAME AS EMP_NAME, COUNT(T2.EMP_ID) AS LATE_CNT--T1.EMP_ID,COUNT(T1.EMP_ID)
                FROM TIMETABLE_TBL T1, WORK_TBL T2, EMPLOYEE_TBL T3
                WHERE T1.EMP_ID = T2.EMP_ID(+)
                AND T1.WORK_DATE = T2.WORK_DATE(+)
                AND T1.EMP_ID(+) = T3.EMP_ID
                AND T2.WORK_IO = 'I' 
                AND TO_DATE(T1.IN_TIME,'HH24:MI') <= TO_DATE(T2.WORK_TIME, 'HH24:MI')
                GROUP BY T1.EMP_ID, T3.EMP_NAME
            ) T2
            WHERE T1.EMP_ID = T2.EMP_ID
            AND T2.EMP_ID LIKE '%'||IN_EMP_ID||'%'
            AND T2.EMP_NAME LIKE '%'||IN_EMP_NAME||'%'
            ;
            
        ELSIF IN_CHECK_SUMMARY = 0 THEN
            OPEN O_RST FOR
           SELECT T1.EMP_ID,T3.EMP_NAME, T1.WORK_DATE, T1.IN_TIME, T2.WORK_TIME, T2.WORK_IO
            FROM TIMETABLE_TBL T1, WORK_TBL T2, EMPLOYEE_TBL T3
            WHERE T1.EMP_ID = T2.EMP_ID(+)
            AND T1.WORK_DATE = T2.WORK_DATE(+)
            AND T1.EMP_ID(+) = T3.EMP_ID
            AND T2.WORK_IO = 'I' 
            AND TO_DATE(T1.IN_TIME,'HH24:MI') <= TO_DATE(T2.WORK_TIME, 'HH24:MI')
            AND T1.EMP_ID LIKE '%'||IN_EMP_ID||'%'
            AND T3.EMP_NAME LIKE '%'||IN_EMP_NAME||'%' 
            ;
        END IF;
  END PROC_SEL_LATE_ATT
  ;
  
  /* 직원 주휴수당 지급 조회 프로시저 */
    --주휴수당을 포함한 주급 계산 
  PROCEDURE PROC_SEL_W_SALARY
  (
        IN_EMP_ID       IN      VARCHAR2,
        IN_EMP_NAME     IN      VARCHAR2,
        IN_WEEK_NUM     IN      NUMBER,
        O_RST           OUT     SYS_REFCURSOR
  )
  AS
  BEGIN
    OPEN O_RST FOR
    SELECT A.EMP_ID, A.EMP_NAME, B.WEEK_NUM
           , CASE WHEN B.WORK_HOUR >=15 THEN (B.WORK_HOUR + ROUND(B.WORK_HOUR/B.WEEK_WORK_CNT))*A.EMP_SALARY
              -- WHEN T2.WORK_HOUT < 15 THEN (T2.WORK_HOUR * T1.EMP_SALARY)
             ELSE B.WORK_HOUR * A.EMP_SALARY
             END AS WEEK_SALARY       --15시간 넘어가면 전체 일한시간의 일한 날을 나눠서 주휴수당으로 지급
             ,CASE WHEN B.WORK_HOUR >=15 THEN 'Y' ELSE 'N' END AS BONUS_YN      
    FROM (
        SELECT EMP_ID, EMP_NAME, EMP_SALARY
        FROM EMPLOYEE_TBL
        WHERE EMP_LEAVE_DATE IS NULL        --아직 퇴사하지 않은 직원들 
    ) A,
    (   --출근, 퇴근 데이터 합쳐서 그주에 일했던 시간  SELECT
        SELECT T1.EMP_ID,TO_CHAR(TO_DATE(T1.WORK_DATE,'YYYY-MM-DD'),'IW') AS WEEK_NUM,                                                                              --(TO_DATE(T2.WORK_TIME, 'HH24:MI')- TO_DATE(T1.WORK_TIME, 'HH24:MI')) * 24 AS WORK_HOUR,
               COUNT(T1.WORK_DATE) AS WEEK_WORK_CNT
               ,SUM( ROUND((TO_DATE(T2.WORK_TIME, 'HH24:MI')- TO_DATE(T1.WORK_TIME, 'HH24:MI')) * 24)) AS WORK_HOUR
        FROM 
        (   --출근 데이터
            SELECT EMP_ID, WORK_DATE, WORK_TIME, WORK_IO
            FROM WORK_TBL
            WHERE WORK_IO = 'I'
        )T1, 
        (   --퇴근데이터
            SELECT EMP_ID,WORK_DATE, WORK_TIME, WORK_IO
            FROM WORK_TBL
            WHERE WORK_IO = 'O'
        )T2 
        --EMPLOYEE_TBL T3
        WHERE T1.EMP_ID = T2.EMP_ID
        AND T1.WORK_DATE = T2.WORK_DATE
        GROUP BY T1.EMP_ID,TO_CHAR(TO_DATE(T1.WORK_DATE,'YYYY-MM-DD'),'IW')
    )B
    WHERE A.EMP_ID = B.EMP_ID(+)
    AND A.EMP_ID LIKE '%'||IN_EMP_ID||'%'
    AND A.EMP_NAME LIKE '%'||IN_EMP_NAME||'%'
    AND B.WEEK_NUM LIKE'%'|| IN_WEEK_NUM ||'%'
    ;
  END PROC_SEL_W_SALARY
  ;
  
  /* 근무시간 중의 일 처리량 조회 프로시저 */
  
  PROCEDURE PROC_SEL_EMP_WELLWORK
  (
        O_RST           OUT     SYS_REFCURSOR
  )
  AS
  
  BEGIN
    OPEN O_RST FOR
    SELECT EMP_ID,EMP_NAME, ROUND(AVG(PER_HOUR_WORK),2)
    FROM 
    (
        -- 날짜별 직원마다의 일한 시간과 그 시간에서 소화해낸 주문양과 그 비율
        SELECT B.EMP_ID AS EMP_ID,C.EMP_NAME AS EMP_NAME, B.WORK_DATE AS WORK_DATE, ROUND((TO_DATE(B.OUT_WORK_TIME,'HH24:MI')-TO_DATE(B.IN_WORK_TIME,'HH24:MI'))*24) AS TLT_WORK_TIME,
                SUM(MENU_QTY),ROUND(SUM(MENU_QTY) / ROUND((TO_DATE(B.OUT_WORK_TIME,'HH24:MI')-TO_DATE(B.IN_WORK_TIME,'HH24:MI'))*24),2) AS PER_HOUR_WORK
        FROM 
        (
        --판매테이블에서 날짜와 시간 SELECT
        SELECT ORD_ID, MENU_ID, MENU_QTY, TO_CHAR(ORD_DATE,'YYYY-MM-DD') AS ORD_DATE,TO_CHAR(ORD_DATE,'HH24:MI')AS ORD_TIME 
        FROM SALE_TBL
        )A,
        (
        SELECT T1.EMP_ID AS EMP_ID, T1.WORK_DATE AS WORK_DATE, T1.WORK_TIME AS IN_WORK_TIME, T2.WORK_TIME AS OUT_WORK_TIME
        FROM 
        (   --출근 데이터
            SELECT EMP_ID, WORK_DATE, WORK_TIME, WORK_IO
            FROM WORK_TBL
            WHERE WORK_IO = 'I'
        )T1, 
        (   --퇴근데이터
            SELECT EMP_ID,WORK_DATE, WORK_TIME, WORK_IO
            FROM WORK_TBL
            WHERE WORK_IO = 'O'
        )T2
            --EMPLOYEE_TBL T3
        WHERE T1.EMP_ID = T2.EMP_ID
        AND T1.WORK_DATE = T2.WORK_DATE
        )B,
        EMPLOYEE_TBL C
        WHERE A.ORD_DATE = B.WORK_DATE
        AND B.EMP_ID = C.EMP_ID
        AND TO_DATE(A.ORD_TIME,'HH24:MI')>TO_DATE(B.IN_WORK_TIME,'HH24:MI')
        AND TO_DATE(A.ORD_TIME,'HH24:MI')<TO_DATE(B.OUT_WORK_TIME,'HH24:MI')
        GROUP BY  B.EMP_ID,C.EMP_NAME, B.WORK_DATE, ROUND((TO_DATE(B.OUT_WORK_TIME,'HH24:MI')-TO_DATE(B.IN_WORK_TIME,'HH24:MI'))*24) 
        --ORDER BY ORD_ID,MENU_ID
    )
    GROUP BY EMP_ID,EMP_NAME
     
    ;
  END PROC_SEL_EMP_WELLWORK
  ;
  
END PKG_EMP_MANAGE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_ETC
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_ETC" AS
    /* 지역별 쌓은 포인트 */ 
  PROCEDURE PROC_STOCK_POINT
  (
    IN_CUS_ADDR         IN          VARCHAR2,
    O_CUR               OUT         SYS_REFCURSOR
  ) AS
  BEGIN
        OPEN O_CUR FOR
        SELECT T1.CUS_ADDR, TO_CHAR(SUM(T2.SAVE_POINT), '999,999') POINT
        FROM CUSTOMER_TBL T1, POINT_TBL T2
        WHERE T1.CUS_ID = T2.CUS_ID
        GROUP BY T1.CUS_ADDR
        ;
  END PROC_STOCK_POINT;

END PKG_ETC;

/
--------------------------------------------------------
--  DDL for Package Body PKG_EVENT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_EVENT" AS

--EVENT 데이터 단순 INSERT 및 수정
  PROCEDURE PROC_MOD_EVENT
  (
        IN_EVENT_ID         IN   VARCHAR2,
        IN_EVENT_CONTENTS   IN   VARCHAR2,
        IN_EVENT_DATE       IN   VARCHAR2,
        IN_EVENT_DIS_RATE   IN   NUMBER,
        IN_EVENT_DIS_GRD    IN   VARCHAR2,
        IN_MULTI_GRD_YN       IN   NUMBER,
        IN_EXCEPT_GRD1      IN   VARCHAR2,
        IN_EXCEPT_GRD2      IN   VARCHAR2   
  ) 
  AS
    V_EVENT_ID      CHAR(6);
  BEGIN
    -- TODO: PROCEDURE PKG_EVENT.PROC_MOD_EVENT에 대해 구현이 필요합니다.
    --EVENT_ ID 생성 및 V_EVENT_ID에 할당
    SELECT 'EV' || TO_CHAR(TO_NUMBER(SUBSTR(NVL(MAX(EVENT_ID),'EV0000'),3))+1,'FM0000')
    INTO V_EVENT_ID
    FROM EVENT_TBL
    ;

    IF IN_MULTI_GRD_YN = 1 THEN
     --IN_MULTI_GRD_YN를 INSERT일때 들어오는 값(1 OR 0)이라고 가정
    --같은 이벤트를 한번에 다른 등급과 함께 적용 시킬것인가 (예외는 2개)
        INSERT INTO EVENT_TBL
            SELECT 'EV' || TO_CHAR(TO_NUMBER(SUBSTR((T1.EV_ID),3))+ROWNUM,'FM0000'),IN_EVENT_CONTENTS,IN_EVENT_DATE,TO_NUMBER(IN_EVENT_DIS_RATE,'9.99'), T2.COM_ID
            FROM 
            (SELECT NVL(MAX(EVENT_ID),'EV0000')AS EV_ID FROM EVENT_TBL) T1,
            COMMONS_TBL T2
            WHERE T2.PARENT_ID = 'COM005'
            AND T2.COM_ID NOT LIKE '%'||NVL(IN_EXCEPT_GRD1,' ')||'%'    --NULL값이면 모든값이 안나오니까 NVL로 NULL일때의 값을 ' '으로 설정했음
            AND T2.COM_ID NOT LIKE '%'||NVL(IN_EXCEPT_GRD2,' ')||'%'
        ;

    --IN_MULTI_GRD_TN = 0, NULL일때 실행 될 것
    --INSERT라면 하나의 등급에 하나의 이벤트만 추가한다.
    ELSE

         MERGE INTO EVENT_TBL
        USING DUAL
        ON (EVENT_ID = IN_EVENT_ID)
        WHEN MATCHED THEN
            UPDATE SET  EVENT_CONTENTS = NVL(IN_EVENT_CONTENTS,EVENT_CONTENTS),
                        EVENT_DATE = NVL(IN_EVENT_DATE, EVENT_DATE),
                        EVENT_DIS_RATE = NVL(IN_EVENT_DIS_RATE, EVENT_DIS_RATE),
                        EVENT_DIS_GRD = NVL(IN_EVENT_DIS_GRD, EVENT_DIS_GRD)
        WHEN NOT MATCHED THEN
           INSERT 
            (EVENT_ID,EVENT_CONTENTS,EVENT_DATE,EVENT_DIS_RATE,EVENT_DIS_GRD)
            VALUES
            (V_EVENT_ID,IN_EVENT_CONTENTS,IN_EVENT_DATE,IN_EVENT_DIS_RATE,IN_EVENT_DIS_GRD)
            ;
    END IF
    ;

  END PROC_MOD_EVENT;

  --EVENT SELECT검색  
  PROCEDURE PROC_SEL_EVENT
  (
        IN_EVENT_ID         IN      VARCHAR2,
        IN_EVENT_CONTENTS   IN      VARCHAR2,
        IN_EVENT_DATE       IN      VARCHAR2,
        IN_EVENT_DIS_RATE   IN      NUMBER,
        IN_EVENT_MAX_RATE   IN      NUMBER,
        IN_EVENT_MIN_RATE   IN      NUMBER,
        IN_EVENT_DIS_GRD       IN      VARCHAR2,
        O_RST               OUT     SYS_REFCURSOR
  )
  AS

  BEGIN
   OPEN O_RST FOR
        SELECT EVENT_ID,EVENT_CONTENTS, EVENT_DATE, EVENT_DIS_RATE, EVENT_DIS_GRD
        FROM EVENT_TBL
        WHERE EVENT_ID LIKE '%'||IN_EVENT_ID||'%'
        AND EVENT_CONTENTS LIKE '%'||IN_EVENT_CONTENTS||'%'
        AND EVENT_DATE LIKE '%'||IN_EVENT_DATE||'%'
        AND EVENT_DIS_RATE LIKE '%'||IN_EVENT_DIS_RATE||'%'
        AND EVENT_DIS_RATE <= NVL(IN_EVENT_MAX_RATE, 1.1)   --할인율을 최대와 최소로 SELECT
        AND EVENT_DIS_RATE >= NVL(IN_EVENT_MIN_RATE, 0)
        AND EVENT_DIS_GRD LIKE '%'||IN_EVENT_DIS_GRD||'%'
    ;
  END PROC_SEL_EVENT
  ;

  PROCEDURE PROC_DEL_EVENT
    (
        IN_EVENT_ID     IN      VARCHAR2,
        IN_EVENT_DIS_GRD    IN  VARCHAR2
    )
    AS

    BEGIN
        DELETE EVENT_TBL
        WHERE EVENT_ID = IN_EVENT_ID
        ;
        /*
            UPDATE PRICE_TBL
            SET EVENT_ID = 'DELETE'
            WHERE EVENT_ID = IN_EVENT_ID
            ;
        */
    END PROC_DEL_EVENT
    ;

END PKG_EVENT;

/
--------------------------------------------------------
--  DDL for Package Body PKG_GROUP
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_GROUP" AS

 /* 그룹테이블 추가 수정 프로시저 */

  PROCEDURE PROC_MOD_GROUP_TBL
  (
    IN_GROUP_ID             IN              VARCHAR2,
    IN_GROUP_NAME           IN              VARCHAR2
    --IN_GROUP_SEQ           IN              NUMBER  
  ) 
  AS

     V_GROUP_ID             CHAR(4);
     V_GROUP_SEQ            NUMBER(3);  

  BEGIN

	-- 그룹 아이디 자동 생성

    SELECT 'G'||TO_CHAR(TO_NUMBER(NVL(SUBSTR(MAX(GROUP_ID),2),0))+1,'FM000')
    INTO V_GROUP_ID
    FROM GROUP_TBL
    ;

	-- 그룹 시퀀스 자동 생성 

    SELECT TO_NUMBER(NVL(MAX(GROUP_SEQ),0))+1
    INTO V_GROUP_SEQ
    FROM GROUP_TBL
    ;


    -- 입력한 GROUP_ID가 없거나 NULL을 입력하면  GROUP_ID, GROUP_SEQ 자동 생성 + 입력한 GROUP_NAME
    -- GROUP_ID가 있다면 입력한 GROUP_NAME으로 변경

    MERGE INTO GROUP_TBL T1
    USING DUAL
    ON (T1.GROUP_ID = IN_GROUP_ID)
    WHEN MATCHED THEN
    UPDATE SET GROUP_NAME = IN_GROUP_NAME
    WHEN NOT MATCHED THEN
    INSERT (GROUP_ID,GROUP_NAME,GROUP_SEQ) 
    VALUES (V_GROUP_ID,IN_GROUP_NAME,V_GROUP_SEQ)
    ;

  END PROC_MOD_GROUP_TBL;

      /* 그룹 테이블 조회 프로시저 */

    PROCEDURE PROC_SEL_GROUP_TBL
    (
        IN_GROUP_ID         IN          VARCHAR2,
        IN_GROUP_NAME       IN          VARCHAR2,
        O_CUR               OUT         SYS_REFCURSOR
    )
    AS

    BEGIN

         OPEN O_CUR FOR
         SELECT *
         FROM GROUP_TBL
         WHERE GROUP_ID LIKE '%'|| IN_GROUP_ID ||'%'
         AND GROUP_NAME LIKE '%'||IN_GROUP_NAME||'%'   
         ;

    END PROC_SEL_GROUP_TBL;

    /* 그룹 테이블 삭제 프로시저 */

    PROCEDURE PROC_DEL_GROUP_TBL
    (
        IN_GROUP_ID         IN          VARCHAR2
    )
    AS

        V_GROUP_SEQ         NUMBER(3);

    BEGIN
        -- 선택한 그룹 아이디의 시퀀스
        SELECT GROUP_SEQ
        INTO V_GROUP_SEQ
        FROM GROUP_TBL
        WHERE GROUP_ID = IN_GROUP_ID
        ;

        -- 선택한 그룹 아이디 ROW 삭제
        DELETE GROUP_TBL
        WHERE GROUP_ID = IN_GROUP_ID
        ;

        -- 선택한 그룹 아이디의 시퀀스보다 큰 그룹 시쿼스 -1 업데이트
        UPDATE GROUP_TBL
        SET GROUP_SEQ = GROUP_SEQ -1
        WHERE GROUP_SEQ>V_GROUP_SEQ
        ;

		/*
		--선택한 그룹이 삭제 되면 COMMONS_TBL의 해당 그룹 데이터 삭제

		DELETE FROM COMMONS_TBL
		WHERE GROUP_ID = IN_GROUP_ID
		;
        */
    END PROC_DEL_GROUP_TBL;
END PKG_GROUP;

/
--------------------------------------------------------
--  DDL for Package Body PKG_MENU
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_MENU" AS


    --메뉴 데이터 삽입 및 수정
  PROCEDURE PROC_MOD_MENU
  (
        IN_MENU_ID       IN      VARCHAR2,
        IN_MENU_PART_ID IN      VARCHAR2,       --COM16,17,18,19 공통코드
        IN_MENU_NAME     IN      VARCHAR2,
        IN_MENU_SIZE     IN      VARCHAR2,
        IN_MENU_HC      IN      VARCHAR2,
        IN_MENU_PRICE    IN      VARCHAR2,
        IN_MENU_CONTENTS     IN      VARCHAR2
  ) AS
    V_MENU_ID       CHAR(4);
  BEGIN
    -- TODO: PROCEDURE PKG_MENU.PROC_MOD_MENU에 대해 구현이 필요합니다.
    --MENU 아이디 생성
     SELECT  'M' || TO_CHAR(TO_NUMBER(SUBSTR(NVL(MAX(MENU_ID),'CUS000'),4))+1,'FM000')
    INTO V_MENU_ID
    FROM MENU_TBL
    ;

    --MENU 데이터 생성 및 업데이트
    MERGE INTO MENU_TBL
    USING DUAL
    ON (MENU_ID = IN_MENU_ID)
    WHEN MATCHED THEN
        UPDATE SET MENU_PART_ID  = NVL(IN_MENU_PART_ID, MENU_PART_ID),
                    MENU_NAME = NVL(IN_MENU_NAME,MENU_NAME),
                    MENU_SIZE = NVL(IN_MENU_SIZE, MENU_SIZE),
                    MENU_HC = NVL(IN_MENU_HC, MENU_HC),
                    MENU_PRICE = NVL(IN_MENU_PRICE, MENU_PRICE),
                    MENU_CONTENTS = NVL(IN_MENU_CONTENTS,MENU_CONTENTS)
    WHEN NOT MATCHED THEN
        INSERT 
        (MENU_ID,MENU_PART_ID,MENU_NAME,MENU_SIZE,MENU_HC,MENU_PRICE,MENU_CONTENTS)
        VALUES
        (V_MENU_ID,IN_MENU_PART_ID,IN_MENU_NAME,IN_MENU_SIZE,IN_MENU_HC,IN_MENU_PRICE,IN_MENU_CONTENTS)
--(V_CUS_ID,IN_CUS_NAME,IN_CUS_ADDR,IN_CUS_TEL,IN_CUS_BIRTH,NVL(IN_CUS_USE_POINT,0),IN_CUS_CONTENTS)
        ;
  END PROC_MOD_MENU;

  --MENU검색
  PROCEDURE PROC_SEL_MENU
(
        IN_MENU_ID          IN      VARCHAR2,
        IN_MENU_PART_ID     IN      VARCHAR2,
        IN_MENU_PART_TXT    IN      VARCHAR2,
        IN_MENU_NAME        IN      VARCHAR2,
        IN_MENU_SIZE        IN      VARCHAR2,
        IN_MENU_HC          IN      VARCHAR2,
        IN_MAX_MENU_PRICE    IN      NUMBER,
        IN_MIN_MENU_PRICE    IN      NUMBER,
        O_RST               OUT     SYS_REFCURSOR

)
AS

BEGIN
    OPEN O_RST FOR
        SELECT T2.MENU_ID, T1.COM_VAL, T2.MENU_NAME,T2.MENU_SIZE, T2.MENU_SIZE, T2.MENU_HC, T2.MENU_PRICE
        FROM COMMONS_TBL T1, MENU_TBL T2
        WHERE T1.COM_ID = T2.MENU_PART_ID
        AND T2.MENU_ID LIKE '%' || IN_MENU_ID ||'%'
        AND T1.COM_ID LIKE '%'||IN_MENU_PART_ID||'%'
        AND T1.COM_VAL LIKE '%'||IN_MENU_PART_TXT||'%'
        AND T2.MENU_NAME LIKE '%' || IN_MENU_NAME ||'%'
        AND T2.MENU_SIZE LIKE '%' || IN_MENU_SIZE ||'%'
        AND T2.MENU_HC LIKE '%' || IN_MENU_HC ||'%'
        AND T2.MENU_PRICE <= NVL(IN_MAX_MENU_PRICE,100000)  --가격범위
        AND T2.MENU_PRICE >= NVL(IN_MIN_MENU_PRICE,0)
        ;
END PROC_SEL_MENU;

PROCEDURE PROC_DEL_MENU
(
    IN_MENU_ID      IN      VARCHAR2

)
AS

BEGIN
    DELETE FROM MENU_TBL
    WHERE MENU_ID = IN_MENU_ID
    ;
    /*
    --판매에서의 메뉴 데이터 업데이트..
    UPDATE SALE_TBL
    SET MENU_ID = 'DELE'
    WHERE MENU_ID = IN_MENU_ID
    ;
    */
END PROC_DEL_MENU
;

END PKG_MENU;

/
--------------------------------------------------------
--  DDL for Package Body PKG_PRICE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_PRICE" AS

  PROCEDURE PROC_INS_PRICE
  (
    IN_ORD_ID       IN      VARCHAR2,
    IN_POINT        IN      NUMBER,
    O_VAR           OUT     VARCHAR2
  ) 
  AS
    V_CUS_ID    CHAR(6);
    V_TLT_POINT     NUMBER(7);
    V_USABLE_POINT     NUMBER(7);
  BEGIN
    -- TODO: PROCEDURE PKG_PRICE.PROC_INS_PRICE에 대해 구현이 필요합니다.
    
    SELECT MAX(CUS_ID) 
    INTO V_CUS_ID
    FROM SALE_TBL
    WHERE ORD_ID = IN_ORD_ID
    ;
    
    SELECT NVL(SUM(SAVE_POINT),0)
    INTO V_TLT_POINT
    FROM POINT_TBL
    WHERE CUS_ID = V_CUS_ID
    AND USE_POINT_YN = 'N'
    ;
    
    SELECT V_TLT_POINT - NVL(SUM(SAVE_POINT),0)
    INTO V_USABLE_POINT
    FROM POINT_TBL
    WHERE CUS_ID = V_CUS_ID
    AND USE_POINT_YN = 'Y'
    ;
    
    IF V_USABLE_POINT >= NVL(IN_POINT,-10000) THEN
        INSERT INTO PRICE_TBL
        SELECT B.ORD_ID,A.EVENT_ID, B.DIS_COM_ID, NVL(IN_POINT,0) ,SUM(B.PRICE), SUM(B.PRICE *(1-NVL(B.DIS_RATE,0)) *(1 - NVL(A.EVENT_DIS_RATE,0))) - NVL(IN_POINT,0) AS DIS_PRICE
         --       ,A.EVENT_DIS_RATE, B.DIS_COM_ID, 'POINT',B.PRICE ,B.PRICE*(1-B.DIS_RATE) AS PAIED_PRICE
        FROM EVENT_TBL A,
        (
            SELECT T3.ORD_ID AS ORD_ID, T2.CUS_ID AS CUS_ID, T2.CUS_NAME,T2.CUS_GRADE AS CUS_GRADE, 
                    CASE WHEN T1.EXCEPT1 >= T4.EXCEPT1 THEN T1.COM_ID 
                          ELSE T4.COM_ID END AS DIS_COM_ID,
                    CASE WHEN T1.EXCEPT1 >= T4.EXCEPT1 THEN  T1.EXCEPT1 
                          ELSE T4.EXCEPT1 END AS DIS_RATE,
                   T5.MENU_ID, T5.MENU_NAME,T5.MENU_PRICE ,T3.MENU_QTY
                    ,(T5.MENU_PRICE * T3.MENU_QTY) AS PRICE, TO_CHAR(T3.ORD_DATE,'MM/DD/YYYY') AS ORD_DATE
            FROM 
            (
                SELECT COM_ID, COM_VAL, PARENT_ID, EXCEPT1
                FROM COMMONS_TBL
                WHERE PARENT_ID = 'COM005' --등급
            ) T1,
            CUSTOMER_TBL T2,
            (SELECT ORD_ID, ORD_IDX, CUS_ID, MENU_ID, MENU_QTY, ORD_PART, ORD_DATE, REFUND_YN 
            FROM SALE_TBL
       -- WHERE REFUND_YN = 'N'
        ) T3,
            (
                SELECT COM_ID, COM_VAL, PARENT_ID, EXCEPT1
                FROM COMMONS_TBL
                WHERE PARENT_ID = 'COM010' --주문구분
        )T4, 
        MENU_TBL T5
        WHERE T1.COM_ID = T2.CUS_GRADE
        AND T2.CUS_ID = T3.CUS_ID
        AND T3.ORD_ID = IN_ORD_ID       --있으면 하나의 주문번호만 / 이 조건이 없으면 전체 판매데이터의 price를 SELECT할 수 있다. 
        AND T4.COM_ID = T3.ORD_PART
        AND T5.MENU_ID = T3.MENU_ID
        )B
        WHERE A.EVENT_DIS_GRD(+) = B.CUS_GRADE
        AND A.EVENT_DATE(+)  = B.ORD_DATE
        GROUP BY B.ORD_ID,A.EVENT_ID, B.DIS_COM_ID
        ;
    ELSE
    --사용가능 포인트가 IN포인트 보다 적을때
       O_VAR := '사용가능한 포인트가 적어포인트를 사용할수 없습니다.';
    END IF;
    
  END PROC_INS_PRICE;
  
  PROCEDURE PROC_SEL_PRICE
  (
    IN_ORD_ID       IN      VARCHAR2,
    IN_EVENT_ID     IN      VARCHAR2,
    IN_DIS_COM_ID   IN      VARCHAR2,
    IN_USE_POINT    IN      NUMBER,
    IN_ORD_PRICE    IN      NUMBER,
    IN_PAY_PRICE    IN      NUMBER,
    O_RST           OUT      SYS_REFCURSOR
  )
  
  AS
  
  BEGIN
    OPEN O_RST FOR
    SELECT T3.ORD_ID, NVL(T3.EVENT_ID, '적용없음') AS EVENT_ID, NVL(T2.EVENT_CONTENTS,'적용없음') AS EVENT_CON,T3.DIS_COM_ID,T1.COM_VAL,T1.EXCEPT1 AS DIS_RATE ,T3.USE_POINT, T3.ORD_PRICE, T3.PAY_PRICE
    FROM COMMONS_TBL T1,EVENT_TBL T2,PRICE_TBL T3
    WHERE T1.COM_ID(+) = T3.DIS_COM_ID
    AND T2.EVENT_ID(+) = T3.EVENT_ID
    AND T3.ORD_ID LIKE '%'||IN_ORD_ID||'%'
    --AND T3.EVENT_ID LIKE '%'||NVL(IN_EVENT_ID,' ')||'%'
    --AND T3.EVENT_ID = NVL( '%'||:IN_EVENT_ID||'%',NULL)         --값이 있을수도 있고 NULL일수도 있다. 
    AND T3.DIS_COM_ID LIKE '%'||IN_DIS_COM_ID||'%'
    AND T3.USE_POINT LIKE '%'||IN_USE_POINT||'%'
    AND T3.ORD_PRICE LIKE '%'||IN_ORD_PRICE||'%'
    AND T3.PAY_PRICE LIKE '%'||IN_PAY_PRICE||'%'
    
    ;
  END PROC_SEL_PRICE
  ;
  
  PROCEDURE PROC_DEL_PRICE
  (
    IN_ORD_ID       IN      VARCHAR2
  )
  AS
  
  BEGIN
    DELETE FROM PRICE_TBL
    WHERE ORD_ID = IN_ORD_ID
    ;
    /*
        UPDATE POINT_TBL
        SET ORD_ID = 'DELETE'
        WHERE ORD_ID = IN_ORD_ID
        ;
        UPDATE SALE_TBL
        SET  ORD_ID = 'DELETE'
        WHERE ORD_ID = IN_ORD_ID
        ;
    */
  END PROC_DEL_PRICE
  ;

    -- 순이익 계산
    PROCEDURE PROC_SEL_TLT
    (
    O_SEL_TLT   OUT      NUMBER
    )
      
    AS
    
    V_TLT_PRICE     NUMBER(6);
    V_TLT_COST      NUMBER(6);
    V_TLT_MAT       NUMBER(6);
    V_TLT_SAL       NUMBER(6);
    
    BEGIN
    
    -- 총 수입
    SELECT TLT_PRICE
    INTO V_TLT_PRICE
    FROM
    (
    SELECT SUM(ORD_PRICE) TLT_PRICE
    FROM PRICE_TBL
    )
    ;
    
    -- 총 경비
    SELECT TLT_COST
    INTO V_TLT_COST
    FROM
        (
        SELECT SUM(COST_PRICE * COST_QTY) TLT_COST
        FROM COST_TBL
        )
    ;  
    
    -- 총 재료구매
    SELECT TLT_MAT
    INTO V_TLT_MAT
    FROM
    (
    SELECT SUM(MAT_PRICE * MAT_QTY) TLT_MAT
    FROM BUY_TBL
    )
    ;
    
    -- 총 급여
    SELECT TLT_SAL
    INTO V_TLT_SAL
    FROM
    (
    SELECT SUM(SAL_TLT) TLT_SAL
    FROM SALARY_TBL
    )
    ;
    
    
      
      
    END PROC_SEL_TLT;      

END PKG_PRICE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_RANK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_RANK" AS

     /* 많이 팔린 메뉴 순위 조회 프로시저 */
     
  PROCEDURE PROC_MENU_RNK
  (
    O_CUR           OUT         SYS_REFCURSOR
  ) AS
  BEGIN
    OPEN O_CUR FOR
    SELECT T2.MENU_ID, T2.MENU_NAME  ||DECODE(MENU_HC,'H',' HOT','C',' ICE',' ')||' SIZE:'||T2.MENU_SIZE AS MENU , NVL(SUM(T1.MENU_QTY),0) 판매갯수
        ,RANK() OVER(ORDER BY NVL(SUM(T1.MENU_QTY),0) DESC) 판매순위
    FROM SALE_TBL T1, MENU_TBL T2
    WHERE T1.MENU_ID(+) = T2.MENU_ID
    AND T1.REFUND_YN ='N'
    AND T2.MENU_HC IS NOT NULL --굿즈 제외
    GROUP BY T2.MENU_ID, T2.MENU_NAME  ||DECODE(MENU_HC,'H',' HOT','C',' ICE',' ')||' SIZE:'||T2.MENU_SIZE
    ORDER BY 판매순위
    ;
  END PROC_MENU_RNK;
  
    /* 주문을 많이 한 지역 순위 조회 프로시저*/
    
  PROCEDURE PROC_BUY_REGION_RNK
  (
    O_CUR           OUT         SYS_REFCURSOR
  )
  AS
  
  BEGIN
    OPEN O_CUR FOR
    SELECT REGION ,
        COUNT(*), RANK() OVER (ORDER BY COUNT(*) DESC) RNK
    FROM
    (
        SELECT T1.ORD_ID , T3.CUS_NAME, 
                SUBSTR(SUBSTR(T3.CUS_ADDR,INSTR(T3.CUS_ADDR,' ')+1),1,INSTR(SUBSTR(T3.CUS_ADDR,INSTR(T3.CUS_ADDR,' ')+1),' ')) AS REGION
        FROM SALE_TBL T1, COMMONS_TBL T2 ,CUSTOMER_TBL T3
        WHERE T1.ORD_PART = T2.COM_ID AND T1.CUS_ID = T3.CUS_ID
        AND T2.COM_VAL = 'DELIVERY'
        AND T1.REFUND_YN ='N'
        GROUP BY T1.ORD_ID , T3.CUS_NAME, SUBSTR(SUBSTR(T3.CUS_ADDR,INSTR(T3.CUS_ADDR,' ')+1),1,INSTR(SUBSTR(T3.CUS_ADDR,INSTR(T3.CUS_ADDR,' ')+1),' '))
    )
    GROUP BY REGION
    ;
  END PROC_BUY_REGION_RNK;
  
  /* 시간대별 매출액 순위 조회 프로시저 */
    PROCEDURE PROC_SALE_BY_TIME
    (
        O_CUR           OUT         SYS_REFCURSOR
    )
    AS
    
    BEGIN
        OPEN O_CUR FOR
        SELECT TO_CHAR(A.TIME1)||':00'||' ~ '||TO_CHAR(A.TIME1+1)||':00' AS 시간, TO_CHAR(B.TLTP,'999,999,999') 판매액, B.RNK 판매순위
        FROM (SELECT 10+LEVEL-1 AS TIME1 FROM DUAL CONNECT BY LEVEL<=12) A,
        (
                SELECT TO_CHAR(ORD_DATE,'HH24') AS TIME2,SUM(PAY_PRICE) TLTP, 
                                RANK() OVER(ORDER BY SUM(PAY_PRICE) DESC) RNK
                FROM
                (
                    SELECT T1.ORD_ID,T2.PAY_PRICE, T1.ORD_DATE
                    FROM SALE_TBL T1, PRICE_TBL T2
                    WHERE T1.ORD_ID = T2.ORD_ID
                    AND T1.REFUND_YN='N'
                    GROUP BY T1.ORD_ID,T2.PAY_PRICE, T1.ORD_DATE
                    ORDER BY T1.ORD_DATE
                )
                GROUP BY TO_CHAR(ORD_DATE,'HH24')
        ) B
        WHERE A.TIME1 = B. TIME2(+)
        ORDER BY A.TIME1
        ;
    END PROC_SALE_BY_TIME;
    
    /* 메뉴마다 환불된 수량과 조회 프로시저 */
     PROCEDURE PROC_SEL_REFUND_MN
  (
        O_RST       OUT     SYS_REFCURSOR
  )
  AS
  BEGIN
  OPEN O_RST FOR
    SELECT T1.MENU_NAME, T1.MENU_SIZE,NVL(T1.MENU_HC,'해당없음') AS MENU_HC ,SUM(NVL(T2.MENU_QTY,0)) AS SUM_REF_QTY,
            DENSE_RANK()OVER (ORDER BY SUM(NVL(T2.MENU_QTY,0)) DESC) AS RNK_QTY
    FROM MENU_TBL T1,
    (
        SELECT ORD_ID, ORD_IDX, CUS_ID, MENU_ID, MENU_QTY, ORD_PART, ORD_DATE, REFUND_YN
        FROM SALE_TBL 
        WHERE REFUND_YN = 'Y'
    ) T2
    WHERE T1.MENU_ID = T2.MENU_ID(+)
    GROUP BY T1.MENU_NAME, T1.MENU_SIZE,T1.MENU_HC
    ;
  END PROC_SEL_REFUND_MN
  ;
  
  
  
   /* 시간대별 주문횟수와 메뉴량 조회*/
   
    --시간대마다 얼만큼의 메뉴들이 팔렸는지
  --IN_CUS를 변수로 넣으면 해당 고객이 어느 시간대에 얼만큼을 시켰는지를 조회
  PROCEDURE PROC_SALE_PERHOUR
  (
        IN_CUS_ID       IN      VARCHAR2,
       O_RST           OUT     SYS_REFCURSOR
  )
  AS
  BEGIN
    OPEN O_RST FOR
    --시간대, 주문아이디 COUNT, 주문한 TOTAL 잔수, 순위
    SELECT TO_CHAR(ORD_DATE, 'HH24') AS ORD_TIME,COUNT(ORD_ID) ,SUM(MENU_QTY),RANK()OVER(ORDER BY SUM(MENU_QTY) DESC)
    FROM (
        SELECT ORD_ID,SUM(MENU_QTY) AS MENU_QTY,MAX(ORD_DATE) AS ORD_DATE
        FROM  SALE_TBL
        WHERE CUS_ID LIKE '%'||IN_CUS_ID||'%'
        GROUP BY ORD_ID
    )
    GROUP BY TO_CHAR(ORD_DATE, 'HH24')
--ORDER BY ORD_TIME
    ;
  END PROC_SALE_PERHOUR
  ;

END PKG_RANK;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SALARY
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_SALARY" AS


  /* SALARY_TBL 추가 프로시저 */

  PROCEDURE PROC_INS_SALARY_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        --IN_SAL_TLT          IN          NUMBER,
        IN_SAL_MON          IN          VARCHAR2,
        IN_SAL_DATE         IN          VARCHAR2,
        O_ERRMSG            OUT         VARCHAR2
    )
    AS

        V_SAL_IDX       NUMBER(3);      --SAL_IDX 자동생성
        V_SAL_TLT_TIME  NUMBER(3);      --한 달 근무 총 시간
        V_EMP_SAL       NUMBER(8);      --직원 시급

  BEGIN

    --SAL_IDX 자동생성
    SELECT COUNT(*)+1
    INTO V_SAL_IDX
    FROM SALARY_TBL
    WHERE EMP_ID = IN_EMP_ID
    ;
    -- 한 달 근무 총 시간 (하루 근무시간 반올림)
    SELECT TLT
    INTO V_SAL_TLT_TIME
    FROM
    (
    SELECT EMP_ID,SUM(WORKT) TLT
    FROM
    (
        SELECT A.EMP_ID, ROUND((TO_DATE(TO_CHAR(TO_DATE(B.WORK_DATE,'YYYY-MM-DD'),'YYYY-MM-DD')||' '
                        ||B.WORK_TIME,'YYYY-MM-DD HH24:MI') - 
                        TO_DATE(TO_CHAR(TO_DATE(A.WORK_DATE,'YYYY-MM-DD'),'YYYY-MM-DD')||' '
                        ||A.WORK_TIME,'YYYY-MM-DD HH24:MI'))*24) AS WORKT
        FROM
        (
            SELECT * FROM WORK_TBL
            WHERE WORK_IO = 'I'
        )A,
        (
            SELECT * FROM WORK_TBL
            WHERE WORK_IO = 'O'
        )B
        WHERE A.EMP_ID=B.EMP_ID AND A.WORK_DATE = B.WORK_DATE
        AND TO_CHAR(TO_DATE(A.WORK_DATE,'YYYY-MM-DD'),'YYYY-MM') =IN_SAL_MON
        AND TO_CHAR(TO_DATE(B.WORK_DATE,'YYYY-MM-DD'),'YYYY-MM') =IN_SAL_MON
    )
    WHERE EMP_ID= IN_EMP_ID
    GROUP BY EMP_ID
    )
    ;

    --직원 시급
    SELECT EMP_SALARY
    INTO V_EMP_SAL
    FROM EMPLOYEE_TBL
    WHERE EMP_ID = IN_EMP_ID
    ;

    INSERT INTO SALARY_TBL
    (EMP_ID, SAL_IDX, SAL_TLT, SAL_MON, SAL_DATE)
    VALUES
    (IN_EMP_ID, V_SAL_IDX,V_EMP_SAL*V_SAL_TLT_TIME,IN_SAL_MON,IN_SAL_DATE)
    ;

    EXCEPTION
            WHEN OTHERS THEN
            O_ERRMSG := '에러가 발생하였습니다.';
            ROLLBACK;
    /*
    INSERT INTO SALARY_TBL
    (EMP_ID, SAL_IDX, SAL_TLT, SAL_MON, SAL_DATE)
    VALUES
    (IN_EMP_ID, V_SAL_IDX, IN_SAL_TLT, IN_SAL_MON, IN_SAL_DATE)
    ;
    */

  END PROC_INS_SALARY_TBL;

    /* SALARY_TBL 조회 프로시저 */

    PROCEDURE PROC_SEL_SALARY_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        IN_EMP_NAME         IN          VARCHAR2,
        IN_SAL_MON          IN          VARCHAR2,
        O_CUR               OUT         SYS_REFCURSOR,
        O_ERRMSG            OUT         VARCHAR2
    )
    AS

    BEGIN

        OPEN O_CUR FOR
        SELECT *
        FROM
        (
			SELECT T1.EMP_ID, T2.EMP_NAME, T1.SAL_IDX, TO_CHAR(T1.SAL_TLT,'999,999,999')급여, T1.SAL_MON, T1.SAL_DATE
			FROM SALARY_TBL T1, EMPLOYEE_TBL T2
			WHERE T1.EMP_ID = T2.EMP_ID
        )
        WHERE EMP_ID LIKE '%'|| IN_EMP_ID ||'%'
        AND EMP_NAME LIKE '%'|| IN_EMP_NAME ||'%'
        AND SAL_MON LIKE '%'|| IN_SAL_MON ||'%'
        ORDER BY SAL_MON, EMP_ID 
        ;

        /*
        EXCEPTION
            WHEN OTHERS THEN
            O_ERRMSG := '에러가 발생하였습니다.';
            ROLLBACK;
			*/

    END PROC_SEL_SALARY_TBL;

    /* SALARY_TBL 수정 프로시저 */

    PROCEDURE PROC_UP_SALARY_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        CHG_EMP_ID          IN          VARCHAR2,
        IN_SAL_IDX          IN          NUMBER,
        IN_SAL_TLT          IN          NUMBER,
        IN_SAL_MON          IN          VARCHAR2,
        IN_SAL_DATE         IN          VARCHAR2,
        O_ERRMSG            OUT         VARCHAR2
    )
    AS

    BEGIN

        UPDATE SALARY_TBL
        SET EMP_ID = NVL(CHG_EMP_ID,EMP_ID),
            SAL_TLT = NVL(IN_SAL_TLT,SAL_TLT),
            SAL_MON = NVL(IN_SAL_MON,SAL_MON),
            SAL_DATE = NVL(IN_SAL_DATE,SAL_DATE)
        WHERE EMP_ID = IN_EMP_ID
        AND SAL_IDX = IN_SAL_IDX
        ;


        EXCEPTION
            WHEN OTHERS THEN
            O_ERRMSG := '에러가 발생하였습니다.';

    END PROC_UP_SALARY_TBL;

    /* SALARY_TBL 삭제 프로시저 */

    PROCEDURE PROC_DEL_SALARY_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        IN_SAL_IDX          IN          NUMBER,
        O_ERRMSG            OUT         VARCHAR2
    )
    AS

    BEGIN

        DELETE SALARY_TBL
        WHERE EMP_ID = IN_EMP_ID
        AND SAL_IDX = IN_SAL_IDX
        ;

        EXCEPTION
            WHEN OTHERS THEN
            O_ERRMSG := '에러가 발생하였습니다.';
            ROLLBACK;

    END PROC_DEL_SALARY_TBL;

END PKG_SALARY;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SALE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_SALE" AS

  PROCEDURE PROC_INS_SALE
(
   IN_ORD_ID   IN      VARCHAR2,
	IN_CUS_ID		IN		VARCHAR2,
	IN_MENU_ID		IN		VARCHAR2,
	IN_MENU_QTY	IN		NUMBER,
	IN_ORD_PART	IN		VARCHAR2,
	IN_ORD_DATE	IN		VARCHAR2,       --'YYYY-MM-DD HH24:MI:SS'
	IN_REFUND_YN	IN		VARCHAR2
	
)
 AS
     V_ORD_ID       CHAR(6);
     V_ORD_IDX      NUMBER(2);
  BEGIN
    -- TODO: PROCEDURE PKG_SALE.PROC_MOD_SALE에 대해 구현이 필요합니다.
    IF IN_ORD_ID IS NULL THEN
    --새로운 주문번호
     	SELECT  'A' || TO_CHAR(TO_NUMBER(SUBSTR(NVL(MAX(ORD_ID),'A00000'),4))+1,'FM00000')
    	INTO V_ORD_ID	
    	FROM SALE_TBL;

        V_ORD_IDX := 1;
    ELSE 
    --원래의 주문번호에 메뉴(인덱스)를 추가
        V_ORD_ID := IN_ORD_ID;

        SELECT  NVL(MAX(ORD_IDX),0)+1
    	INTO V_ORD_IDX	
    	FROM SALE_TBL
        WHERE ORD_ID = IN_ORD_ID
        ;
     END IF;

    INSERT INTO SALE_TBL
    (ORD_ID, ORD_IDX, CUS_ID, MENU_ID, MENU_QTY, ORD_PART, ORD_DATE, REFUND_YN)
    VALUES
    (V_ORD_ID, V_ORD_IDX,IN_CUS_ID, IN_MENU_ID, IN_MENU_QTY, IN_ORD_PART, TO_DATE(IN_ORD_DATE,'YYYY-MM-DD HH24:MI:SS'), 'N')
    ;
    --구매할 때는 무조건 환불여부 N

  END PROC_INS_SALE;

  PROCEDURE PROC_REFUND_SALE
    (
        IN_ORD_ID       IN      VARCHAR2,
        IN_ORD_IDX      IN      NUMBER
    )
    AS
        V_ORD_PRICE     NUMBER(7);
        V_PAY_PRICE     NUMBER(7);
        V_CUS_ID        CHAR(6);
        V_CUS_GRADE     CHAR(6);
        V_CUS_TLT_POINT     NUMBER(7);
    BEGIN
       UPDATE SALE_TBL
       SET REFUND_YN = 'Y'
       WHERE ORD_ID = IN_ORD_ID
       AND ORD_IDX = IN_ORD_IDX
       ;
       /*
       환불하면 가격테이블과 포인트 테이블을 수정
       진짜.. 큰일..ㅎㅎ
       */

       --환불한 상품의 인덱스를 제외한  TOTAL PRICE
        SELECT NVL(MAX(SUM(T2.MENU_QTY * T1.MENU_PRICE)),0)
        INTO V_ORD_PRICE
        FROM MENU_TBL T1, SALE_TBL T2
        WHERE T1.MENU_ID = T2.MENU_ID
        AND T2.ORD_ID = IN_ORD_ID
        AND T2.ORD_IDX != IN_ORD_IDX        -- ORD_IDX != IN_ORD_IDX
        GROUP BY T2.ORD_ID
        ;

        --TOTAL PRICE의 할인된 가격
        SELECT V_ORD_PRICE *((1-NVL( T1.EVENT_DIS_RATE,0))*(1-NVL(T2.EXCEPT1,0)))
        INTO V_PAY_PRICE
        FROM EVENT_TBL T1, COMMONS_TBL T2, PRICE_TBL T3
        WHERE T1.EVENT_ID(+) = T3.EVENT_ID
        AND T2.COM_ID(+) = T3.DIS_COM_ID
        AND T3.ORD_ID = IN_ORD_ID
        ;

       --PRICE테이블에 환불 후의 가격으로 업데이트
       UPDATE PRICE_TBL
       SET ORD_PRICE = V_ORD_PRICE,
           PAY_PRICE = V_PAY_PRICE
       WHERE ORD_ID = IN_ORD_ID
       ;

       --POINT테이블에 환불 후의 가격으로 업데이트
       UPDATE POINT_TBL
       SET SAVE_POINT = V_PAY_PRICE * 0.01
       WHERE ORD_ID = IN_ORD_ID
       ;

       --CUS_ID 찾기
       SELECT CUS_ID 
       INTO V_CUS_ID
       FROM POINT_TBL
       WHERE ORD_ID = IN_ORD_ID
       ;
       --누적 포인트 값 찾기
       SELECT SUM(SAVE_POINT)
       INTO V_CUS_TLT_POINT
       FROM POINT_TBL
       WHERE CUS_ID = V_CUS_ID
       AND USE_POINT_YN = 'N'
       ;

       --누적 포인트에 따른 V_CUS_GRADE에 값 할당
       IF V_CUS_TLT_POINT < 1000 THEN
            SELECT COM_ID
            INTO V_CUS_GRADE
            FROM COMMONS_TBL
            WHERE COM_ID = 'COM009'
            ;
        ELSIF V_CUS_TLT_POINT < 3000 THEN
            SELECT COM_ID
            INTO V_CUS_GRADE
            FROM COMMONS_TBL
            WHERE COM_ID = 'COM008'
            ;
        ELSIF V_CUS_TLT_POINT < 5000 THEN
            SELECT COM_ID
            INTO V_CUS_GRADE
            FROM COMMONS_TBL
            WHERE COM_ID = 'COM007'
            ;
        ELSE 
        --V_CUS_TLT_POINT >= 5000 THEN
        --5000이상일때
            SELECT COM_ID
            INTO V_CUS_GRADE
            FROM COMMONS_TBL
            WHERE COM_ID = 'COM006'
            ;
        END IF;       

        --CUSTOMER에 GRADE업데이트
        UPDATE CUSTOMER_TBL
        SET CUS_GRADE = V_CUS_GRADE
        WHERE CUS_ID = V_CUS_ID
        ;


    END PROC_REFUND_SALE
    ;

END PKG_SALE;

/
--------------------------------------------------------
--  DDL for Package Body PKG_TIMETABLE_TBL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_TIMETABLE_TBL" AS

	/* TIMETABLE_TBL INSERT 프로시저 */

  PROCEDURE PROC_INS_TIMETABLE_TBL
		(
			IN_EMP_ID					IN					VARCHAR2,
			IN_IN_TIME					IN					VARCHAR2,
			IN_OUT_TIME				IN					VARCHAR2,
			IN_WORK_DATE			IN					VARCHAR2,
			IN_TT_CONTENTS			IN					VARCHAR2
		) 
		AS
  BEGIN

    INSERT INTO TIMETABLE_TBL
	(EMP_ID, WORK_DATE, IN_TIME, OUT_TIME, TT_CONTENTS)
	VALUES
	(IN_EMP_ID, IN_WORK_DATE, IN_IN_TIME, IN_OUT_TIME, IN_TT_CONTENTS)
	;

  END PROC_INS_TIMETABLE_TBL;

		 /* TIMETABLE_TBL UPDATE 프로시저 */

		PROCEDURE PROC_UP_TIMETABLE_TBL
		(
			IN_EMP_ID					IN					VARCHAR2,
			IN_IN_TIME					IN					VARCHAR2,
			IN_OUT_TIME				IN					VARCHAR2,
			IN_WORK_DATE			IN					VARCHAR2,
			IN_TT_CONTENTS			IN					VARCHAR2
		)
		AS

		BEGIN

			UPDATE TIMETABLE_TBL
			SET IN_TIME = IN_IN_TIME,
				 OUT_TIME = IN_OUT_TIME,
				 TT_CONTENTS = IN_TT_CONTENTS
			WHERE EMP_ID = IN_EMP_ID AND WORK_DATE = IN_WORK_DATE
			;

		END PROC_UP_TIMETABLE_TBL;

		/* TIMETABLE_TBL SELECT 프로시저 */

		PROCEDURE PROC_SEL_TIMETABLE_TBL
		(
			IN_EMP_ID				IN					VARCHAR2,
			WORKING_TIME		IN					VARCHAR2,
			IN_WORK_DATE		IN					VARCHAR2,
			IN_IN_TIME					IN					VARCHAR2,
			IN_OUT_TIME				IN					VARCHAR2,
			O_CUR					OUT				SYS_REFCURSOR
		)

		AS

		BEGIN

				OPEN O_CUR FOR
				SELECT T1.EMP_ID, T2.EMP_NAME, T1.WORK_DATE, T1.IN_TIME, T1.OUT_TIME, T1.TT_CONTENTS
				FROM TIMETABLE_TBL T1, EMPLOYEE_TBL T2
				WHERE T1.EMP_ID = T2.EMP_ID
				AND T1.EMP_ID LIKE '%'|| IN_EMP_ID ||'%'
				AND T1.WORK_DATE LIKE '%'|| IN_WORK_DATE ||'%'
				;

		END PROC_SEL_TIMETABLE_TBL;

		/* TIMETABLE_TBL DELETE 프로시저 */

		PROCEDURE PROC_DEL_TIMETABLE_TBL
		(
			IN_EMP_ID				IN					VARCHAR2,
			IN_WORK_DATE		IN					VARCHAR2
		)

		AS

		BEGIN

			DELETE FROM TIMETABLE_TBL
			WHERE EMP_ID = IN_EMP_ID AND WORK_DATE = IN_WORK_DATE
			;

		END PROC_DEL_TIMETABLE_TBL;


END PKG_TIMETABLE_TBL;

/
--------------------------------------------------------
--  DDL for Package Body PKG_WORK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PKG_WORK" AS
  /* WORK_TBL 추가 프로시저 */
  PROCEDURE PROC_INS_WORK_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        IN_WORK_DATE        IN          VARCHAR2,
        IN_WORK_TIME        IN          VARCHAR2,
        IN_WORK_IO          IN          VARCHAR2
    )
    AS

        V_WORK_IDX      NUMBER(3);  -- 인덱스 자동생성

  BEGIN

    SELECT COUNT(*)+1
    INTO V_WORK_IDX
    FROM WORK_TBL
    WHERE EMP_ID = IN_EMP_ID
    ;

    INSERT INTO WORK_TBL
    (EMP_ID, WORK_IDX, WORK_DATE, WORK_TIME, WORK_IO)
    VALUES
    (IN_EMP_ID, V_WORK_IDX, IN_WORK_DATE, IN_WORK_TIME, IN_WORK_IO)
    ;

  END PROC_INS_WORK_TBL;

    /* WORK_TLB 조회 프로시저 */

    PROCEDURE PROC_SEL_WORK_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
		IN_EMP_NAME           IN          VARCHAR2,
		IN_WORK_DATE	IN 		  VARCHAR2,
		IN_DIST_IO			IN 			VARCHAR2,
        O_CUR               OUT         SYS_REFCURSOR
    )

    AS

    BEGIN

		OPEN O_CUR FOR
		SELECT T1.EMP_ID, T1.EMP_NAME, T2.WORK_IDX, T2.WORK_DATE, T2.WORK_TIME, T2.WORK_IO
		FROM EMPLOYEE_TBL T1, WORK_TBL T2
		WHERE T1.EMP_ID = T2.EMP_ID
		AND T1.EMP_ID LIKE '%'|| IN_EMP_ID ||'%'
		AND T1.EMP_NAME LIKE '%'|| IN_EMP_NAME ||'%'
		AND T2.WORK_DATE LIKE '%'|| TO_CHAR(TO_DATE(IN_WORK_DATE),'MM/DD/YYYY') ||'%'
		AND T2.WORK_IO LIKE '%'|| IN_DIST_IO ||'%'
		;

    END PROC_SEL_WORK_TBL;

    /* WORK_TBL 수정 프로시저 */

    PROCEDURE PROC_UP_WORK_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,  -- 기존 EMP_ID
        CHG_EMP_ID          IN          VARCHAR2,  -- 새 EMP_ID
        IN_WORK_DATE        IN          VARCHAR2,
        IN_WORK_TIME        IN          VARCHAR2,
        IN_WORK_IO          IN          VARCHAR2,
        IN_WORK_IDX         IN          NUMBER
    )
    AS

    BEGIN

        UPDATE WORK_TBL
        SET --EMP_ID = CHG_EMP_ID,
            WORK_DATE = IN_WORK_DATE,
            WORK_TIME = IN_WORK_TIME,
            WORK_IO   = IN_WORK_IO
        WHERE EMP_ID = IN_EMP_ID
        AND WORK_IDX = IN_WORK_IDX
        ;

    END PROC_UP_WORK_TBL;

    /* WORK_TBL 삭제 프로시저 */
    PROCEDURE PROC_DEL_WORK_TBL
    (
        IN_EMP_ID           IN          VARCHAR2,
        IN_WORK_IDX         IN          NUMBER
    )
    AS

    BEGIN

        DELETE WORK_TBL
        WHERE EMP_ID = IN_EMP_ID
        AND WORK_IDX = IN_WORK_IDX
        ;

    END PROC_DEL_WORK_TBL;
END PKG_WORK;

/
--------------------------------------------------------
--  DDL for Package Body PROC_POINT_TBL
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "PROC_POINT_TBL" AS


    -- 포인트 INSERT 프로시저
    PROCEDURE PROC_POINT_TBL_INSERT
    (
        IN_ORD_ID	        IN          VARCHAR2,
        IN_CUS_ID	        IN          VARCHAR2,
        IN_SAVE_POINT	    IN          NUMBER,
        IN_SAVE_DATE	    IN          VARCHAR2,
        IN_USE_POINT_YN	    IN          VARCHAR2
    ) 
    
    AS
    
    V_PRICE         NUMBER(6);
    V_CUS_ID        CHAR(6);           
    V_ORD_DATE      VARCHAR2(30);
    V_YN            CHAR(1);
    V_SP            NUMBER(5);
    V_GRD           CHAR(6);
    V_USE_POINT     NUMBER(6);
    
    BEGIN
    
    --DELETE FROM POINT_TBL;
    /*
    INSERT INTO POINT_TBL
    
    SELECT A.ORD_ID, A.CUS_ID, ROUND(SUM(A.PAY_PRICE * 0.01), 0) AS POINT_TLT, A.SAVE_DATE, 
    CASE 
    WHEN A.USE_POINT = 0
    THEN 'N'
    
    WHEN A.USE_POINT > 0
    THEN 'Y'
    END AS USE_POINT
    
    FROM
        (
        SELECT T1.ORD_ID, T1.CUS_ID, TO_CHAR(TO_DATE(T1.ORD_DATE, 'YY-MM-DD') + 7, 'YYYY-MM-DD') AS SAVE_DATE, T2.PAY_PRICE, T2.USE_POINT
        FROM SALE_TBL T1, PRICE_TBL T2
        WHERE T2.ORD_ID = T1.ORD_ID
        )A, -- 판매와 가격
    POINT_TBL B
    WHERE A.ORD_ID = B.ORD_ID(+)
    AND A.ORD_ID = IN_ORD_ID
    GROUP BY A.ORD_ID, A.CUS_ID, A.SAVE_DATE, B.USE_POINT_YN, A.USE_POINT
    ;
    */
    
    -- INSERT
    SELECT PAY_PRICE
    INTO V_PRICE
    FROM PRICE_TBL
    WHERE ORD_ID = IN_ORD_ID
    ;
    
    SELECT CUS_ID
    INTO V_CUS_ID
    FROM SALE_TBL
    WHERE ORD_ID = IN_ORD_ID
    GROUP BY CUS_ID
    ;
    
    SELECT ORD_DATE
    INTO V_ORD_DATE
    FROM SALE_TBL
    WHERE ORD_ID = IN_ORD_ID
    GROUP BY ORD_DATE
    ;
    
    SELECT USE_POINT
    INTO V_USE_POINT
    FROM PRICE_TBL
    WHERE ORD_ID = IN_ORD_ID
    ;
    
    SELECT YN
    INTO V_YN
    FROM
    (
    SELECT USE_POINT ,CASE WHEN USE_POINT = 0 THEN 'N'
                          WHEN USE_POINT > 0 THEN 'Y'
                        END AS YN
    FROM PRICE_TBL
    WHERE ORD_ID = IN_ORD_ID
    )
    ;
    IF V_YN ='N' THEN
        INSERT INTO POINT_TBL
        (ORD_ID, CUS_ID, SAVE_POINT, SAVE_DATE, USE_POINT_YN)
        VALUES
        (IN_ORD_ID, V_CUS_ID, V_PRICE*0.01, V_ORD_DATE, V_YN)
        ;
    ELSIF  V_YN ='Y' THEN
    
         INSERT INTO POINT_TBL
        (ORD_ID, CUS_ID, SAVE_POINT, SAVE_DATE, USE_POINT_YN)
        VALUES
        (IN_ORD_ID, V_CUS_ID, V_USE_POINT, V_ORD_DATE, V_YN)
        ;
    END IF;
/*    
    SELECT TLT
    INTO V_SP
    FROM
        (
        SELECT CUS_ID, SUM(SAVE_POINT) TLT
        FROM POINT_TBL
        WHERE CUS_ID = IN_CUS_ID
        AND USE_POINT_YN = 'N'
        GROUP BY CUS_ID
        )
    WHERE CUS_ID = V_CUS_ID
    ;

    UPDATE CUSTOMER_TBL
    SET CUS_GRADE =
    (
    SELECT A1.CUS_GRADE
    FROM
        (
        SELECT A1.CUS_GRADE, SUM(A2.SAVE_POINT) PT
        FROM CUSTOMER_TBL A1, POINT_TBL A2
        WHERE A1.CUS_ID = A2.CUS_ID
        GROUP BY A1.CUS_GRADE
        ) 
        CASE WHEN V_SP > 5000 THEN 'COM008'
        ELSE 'COM006'
        END;
*/   
    SELECT TLTP
    INTO V_SP
    FROM
    (
        SELECT CUS_ID, SUM(SAVE_POINT) TLTP
        FROM POINT_TBL
        WHERE CUS_ID = V_CUS_ID
        AND USE_POINT_YN = 'N'
        GROUP BY CUS_ID
    )
    ;
    
    IF V_SP >= 5000 THEN
    
    UPDATE CUSTOMER_TBL
    SET CUS_GRADE = 'COM006'
    WHERE CUS_ID = V_CUS_ID 
    ;
    
    ELSIF V_SP < 5000 AND V_SP >= 3000 THEN
    UPDATE CUSTOMER_TBL
    SET CUS_GRADE = 'COM007'
    WHERE CUS_ID = V_CUS_ID
    ;
    
    ELSIF V_SP < 3000 AND V_SP >= 1000 THEN
    UPDATE CUSTOMER_TBL
    SET CUS_GRADE = 'COM008'
    WHERE CUS_ID = V_CUS_ID
    ;
    
    ELSE 
    UPDATE CUSTOMER_TBL
    SET CUS_GRADE = 'COM009'
    WHERE CUS_GRADE = V_CUS_ID
    ;
    
    END IF;
    
    
    END PROC_POINT_TBL_INSERT;
    
    
    /*
    PROCEDURE PROC_POINT_TBL_UPDATE
    (
    IN_ORD_F_ID	        IN          CHAR,
    IN_CUS_ID	        IN          CHAR,
    IN_SAVE_POINT	    IN          NUMBER
    )

    
    AS
    
    V_SP        NUMBER(5);
    V_CUS_GRADE CHAR(6);
    
    BEGIN
    
    SELECT TLT
    INTO V_SP
    FROM
        (
        SELECT CUS_ID, SUM(SAVE_POINT) TLT
        FROM POINT_TBL
        WHERE CUS_ID = IN_CUS_ID
        GROUP BY CUS_ID
        )
    ;
    
    SELECT CUS_GRADE
    INTO V_CUS_GRADE
    FROM CUSTOMER_TBL
    WHERE CUS_ID = IN_CUS_ID
    ;
    
    UPDATE CUSTOMER_TBL 
    SET CUS_ID = IN_CUS_ID
    CASE WHEN V_SP >= 5000 THEN V_CUS_GRADE = 'COM008'
    
    END;
        
        
        
        
        
    
    END PROC_POINT_TBL_UPDATE;
    */
    
END PROC_POINT_TBL;

/
--------------------------------------------------------
--  Constraints for Table SALE_TBL
--------------------------------------------------------

  ALTER TABLE "SALE_TBL" MODIFY ("ORD_ID" NOT NULL ENABLE);
  ALTER TABLE "SALE_TBL" MODIFY ("ORD_IDX" NOT NULL ENABLE);
  ALTER TABLE "SALE_TBL" MODIFY ("CUS_ID" NOT NULL ENABLE);
  ALTER TABLE "SALE_TBL" MODIFY ("MENU_ID" NOT NULL ENABLE);
  ALTER TABLE "SALE_TBL" MODIFY ("MENU_QTY" NOT NULL ENABLE);
  ALTER TABLE "SALE_TBL" MODIFY ("ORD_PART" NOT NULL ENABLE);
  ALTER TABLE "SALE_TBL" MODIFY ("ORD_DATE" NOT NULL ENABLE);
  ALTER TABLE "SALE_TBL" MODIFY ("REFUND_YN" NOT NULL ENABLE);
  ALTER TABLE "SALE_TBL" ADD CONSTRAINT "PK_SALE_TBL" PRIMARY KEY ("ORD_ID", "ORD_IDX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COST_TBL
--------------------------------------------------------

  ALTER TABLE "COST_TBL" MODIFY ("COST_ID" NOT NULL ENABLE);
  ALTER TABLE "COST_TBL" MODIFY ("COST_NAME" NOT NULL ENABLE);
  ALTER TABLE "COST_TBL" MODIFY ("COST_PRICE" NOT NULL ENABLE);
  ALTER TABLE "COST_TBL" MODIFY ("COST_DATE" NOT NULL ENABLE);
  ALTER TABLE "COST_TBL" ADD PRIMARY KEY ("COST_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table RECIPE_TBL
--------------------------------------------------------

  ALTER TABLE "RECIPE_TBL" MODIFY ("MENU_ID" NOT NULL ENABLE);
  ALTER TABLE "RECIPE_TBL" MODIFY ("MAT_ID" NOT NULL ENABLE);
  ALTER TABLE "RECIPE_TBL" MODIFY ("MAT_QTY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table EVENT_TBL
--------------------------------------------------------

  ALTER TABLE "EVENT_TBL" MODIFY ("EVENT_ID" NOT NULL ENABLE);
  ALTER TABLE "EVENT_TBL" MODIFY ("EVENT_CONTENTS" NOT NULL ENABLE);
  ALTER TABLE "EVENT_TBL" MODIFY ("EVENT_DATE" NOT NULL ENABLE);
  ALTER TABLE "EVENT_TBL" MODIFY ("EVENT_DIS_RATE" NOT NULL ENABLE);
  ALTER TABLE "EVENT_TBL" MODIFY ("EVENT_DIS_GRD" NOT NULL ENABLE);
  ALTER TABLE "EVENT_TBL" ADD PRIMARY KEY ("EVENT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MENU_TBL
--------------------------------------------------------

  ALTER TABLE "MENU_TBL" ADD PRIMARY KEY ("MENU_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "MENU_TBL" MODIFY ("MENU_ID" NOT NULL ENABLE);
  ALTER TABLE "MENU_TBL" MODIFY ("MENU_PART_ID" NOT NULL ENABLE);
  ALTER TABLE "MENU_TBL" MODIFY ("MENU_NAME" NOT NULL ENABLE);
  ALTER TABLE "MENU_TBL" MODIFY ("MENU_SIZE" NOT NULL ENABLE);
  ALTER TABLE "MENU_TBL" MODIFY ("MENU_PRICE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SALARY_TBL
--------------------------------------------------------

  ALTER TABLE "SALARY_TBL" MODIFY ("EMP_ID" NOT NULL ENABLE);
  ALTER TABLE "SALARY_TBL" MODIFY ("SAL_IDX" NOT NULL ENABLE);
  ALTER TABLE "SALARY_TBL" MODIFY ("SAL_TLT" NOT NULL ENABLE);
  ALTER TABLE "SALARY_TBL" MODIFY ("SAL_MON" NOT NULL ENABLE);
  ALTER TABLE "SALARY_TBL" MODIFY ("SAL_DATE" NOT NULL ENABLE);
  ALTER TABLE "SALARY_TBL" ADD CONSTRAINT "SALARY_PK" PRIMARY KEY ("EMP_ID", "SAL_IDX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table BUY_TBL
--------------------------------------------------------

  ALTER TABLE "BUY_TBL" MODIFY ("MAT_ID" NOT NULL ENABLE);
  ALTER TABLE "BUY_TBL" MODIFY ("MAT_IDX" NOT NULL ENABLE);
  ALTER TABLE "BUY_TBL" MODIFY ("MAT_PRICE" NOT NULL ENABLE);
  ALTER TABLE "BUY_TBL" MODIFY ("MAT_QTY" NOT NULL ENABLE);
  ALTER TABLE "BUY_TBL" MODIFY ("MAT_DATE" NOT NULL ENABLE);
  ALTER TABLE "BUY_TBL" ADD CONSTRAINT "BUY_TBL_PK" PRIMARY KEY ("MAT_ID", "MAT_IDX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table COMMONS_TBL
--------------------------------------------------------

  ALTER TABLE "COMMONS_TBL" MODIFY ("COM_ID" NOT NULL ENABLE);
  ALTER TABLE "COMMONS_TBL" MODIFY ("COM_VAL" NOT NULL ENABLE);
  ALTER TABLE "COMMONS_TBL" MODIFY ("COM_LVL" NOT NULL ENABLE);
  ALTER TABLE "COMMONS_TBL" MODIFY ("COM_SEQ" NOT NULL ENABLE);
  ALTER TABLE "COMMONS_TBL" MODIFY ("PARENT_ID" NOT NULL ENABLE);
  ALTER TABLE "COMMONS_TBL" MODIFY ("GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "COMMONS_TBL" ADD PRIMARY KEY ("COM_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table GROUP_TBL
--------------------------------------------------------

  ALTER TABLE "GROUP_TBL" MODIFY ("GROUP_ID" NOT NULL ENABLE);
  ALTER TABLE "GROUP_TBL" MODIFY ("GROUP_NAME" NOT NULL ENABLE);
  ALTER TABLE "GROUP_TBL" MODIFY ("GROUP_SEQ" NOT NULL ENABLE);
  ALTER TABLE "GROUP_TBL" ADD PRIMARY KEY ("GROUP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table EMPLOYEE_TBL
--------------------------------------------------------

  ALTER TABLE "EMPLOYEE_TBL" MODIFY ("EMP_ID" NOT NULL ENABLE);
  ALTER TABLE "EMPLOYEE_TBL" MODIFY ("EMP_NAME" NOT NULL ENABLE);
  ALTER TABLE "EMPLOYEE_TBL" MODIFY ("EMP_TEL" NOT NULL ENABLE);
  ALTER TABLE "EMPLOYEE_TBL" MODIFY ("EMP_BIRTH" NOT NULL ENABLE);
  ALTER TABLE "EMPLOYEE_TBL" MODIFY ("EMP_POS" NOT NULL ENABLE);
  ALTER TABLE "EMPLOYEE_TBL" MODIFY ("EMP_SALARY" NOT NULL ENABLE);
  ALTER TABLE "EMPLOYEE_TBL" MODIFY ("EMP_ENTER_DATE" NOT NULL ENABLE);
  ALTER TABLE "EMPLOYEE_TBL" ADD PRIMARY KEY ("EMP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MATERIAL_TBL
--------------------------------------------------------

  ALTER TABLE "MATERIAL_TBL" MODIFY ("MAT_ID" NOT NULL ENABLE);
  ALTER TABLE "MATERIAL_TBL" MODIFY ("MAT_NAME" NOT NULL ENABLE);
  ALTER TABLE "MATERIAL_TBL" MODIFY ("MAT_COM" NOT NULL ENABLE);
  ALTER TABLE "MATERIAL_TBL" MODIFY ("MAT_ORIGIN" NOT NULL ENABLE);
  ALTER TABLE "MATERIAL_TBL" MODIFY ("MAT_CONTENTS" NOT NULL ENABLE);
  ALTER TABLE "MATERIAL_TBL" ADD PRIMARY KEY ("MAT_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table TIMETABLE_TBL
--------------------------------------------------------

  ALTER TABLE "TIMETABLE_TBL" MODIFY ("EMP_ID" NOT NULL ENABLE);
  ALTER TABLE "TIMETABLE_TBL" MODIFY ("WORK_DATE" NOT NULL ENABLE);
  ALTER TABLE "TIMETABLE_TBL" MODIFY ("IN_TIME" NOT NULL ENABLE);
  ALTER TABLE "TIMETABLE_TBL" MODIFY ("OUT_TIME" NOT NULL ENABLE);
  ALTER TABLE "TIMETABLE_TBL" ADD CONSTRAINT "PK_TIMETABLE_TBL" PRIMARY KEY ("EMP_ID", "WORK_DATE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table WORK_TBL
--------------------------------------------------------

  ALTER TABLE "WORK_TBL" MODIFY ("EMP_ID" NOT NULL ENABLE);
  ALTER TABLE "WORK_TBL" MODIFY ("WORK_IDX" NOT NULL ENABLE);
  ALTER TABLE "WORK_TBL" MODIFY ("WORK_DATE" NOT NULL ENABLE);
  ALTER TABLE "WORK_TBL" MODIFY ("WORK_TIME" NOT NULL ENABLE);
  ALTER TABLE "WORK_TBL" MODIFY ("WORK_IO" NOT NULL ENABLE);
  ALTER TABLE "WORK_TBL" ADD CONSTRAINT "WORK_PK" PRIMARY KEY ("EMP_ID", "WORK_IDX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRICE_TBL
--------------------------------------------------------

  ALTER TABLE "PRICE_TBL" MODIFY ("DIS_COM_ID" NOT NULL ENABLE);
  ALTER TABLE "PRICE_TBL" MODIFY ("USE_POINT" NOT NULL ENABLE);
  ALTER TABLE "PRICE_TBL" MODIFY ("ORD_PRICE" NOT NULL ENABLE);
  ALTER TABLE "PRICE_TBL" MODIFY ("PAY_PRICE" NOT NULL ENABLE);
  ALTER TABLE "PRICE_TBL" ADD PRIMARY KEY ("ORD_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CUSTOMER_TBL
--------------------------------------------------------

  ALTER TABLE "CUSTOMER_TBL" MODIFY ("CUS_ID" NOT NULL ENABLE);
  ALTER TABLE "CUSTOMER_TBL" MODIFY ("CUS_NAME" NOT NULL ENABLE);
  ALTER TABLE "CUSTOMER_TBL" MODIFY ("CUS_ADDR" NOT NULL ENABLE);
  ALTER TABLE "CUSTOMER_TBL" MODIFY ("CUS_TEL" NOT NULL ENABLE);
  ALTER TABLE "CUSTOMER_TBL" MODIFY ("CUS_BIRTH" NOT NULL ENABLE);
  ALTER TABLE "CUSTOMER_TBL" MODIFY ("CUS_GRADE" NOT NULL ENABLE);
  ALTER TABLE "CUSTOMER_TBL" ADD PRIMARY KEY ("CUS_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table POINT_TBL
--------------------------------------------------------

  ALTER TABLE "POINT_TBL" MODIFY ("CUS_ID" NOT NULL ENABLE);
  ALTER TABLE "POINT_TBL" MODIFY ("SAVE_POINT" NOT NULL ENABLE);
  ALTER TABLE "POINT_TBL" MODIFY ("SAVE_DATE" NOT NULL ENABLE);
  ALTER TABLE "POINT_TBL" MODIFY ("USE_POINT_YN" NOT NULL ENABLE);
  ALTER TABLE "POINT_TBL" ADD PRIMARY KEY ("ORD_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
